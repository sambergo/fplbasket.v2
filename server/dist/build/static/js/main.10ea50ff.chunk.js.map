{"version":3,"sources":["tools.ts","state/state.tsx","service.ts","Landing.tsx","components/CardWithTable.tsx","components/Captains.tsx","components/Chips.tsx","components/DataPage.tsx","theme.ts","components/NavBar.tsx","components/Players.tsx","components/ChipsUsed.tsx","components/CompareGrid.tsx","components/CompareManager.tsx","components/ManagerPage.tsx","components/PointsBox.tsx","components/TeamBox.tsx","components/Standings.tsx","components/Transfers.tsx","League.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["getPlayerName","element","fullname","first_name","length","split","second_name","web_name","getPlayerWebName","getPlayerPosition","element_type","getElementType","a","getElementsTeam","teams","team","short_name","stillToPlay","pick","liveData","elements","explain","map","e","fixture","fixtures","finished_provisional","includes","fromTeamToPlay","picks","picksStillToPlay","reduce","prev","curr","multiplier","filter","totalMatches","initialState","bssData","leagueData","gwsData","selectedGw","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","baseUrl","getBssData","axios","get","getLeague","params","post","getLiveElements","Landing","useState","displayUrl","setDisplayUrl","leagueId","setLeagueId","userSelectedGW","setUserSelectedGW","loading","setLoading","fetchLeague","gw","toString","liveRequest","status","data","type","payload","console","log","leagueRequest","league","window","localStorage","setItem","alert","useEffect","usersPreviousId","getItem","idFromBrowser","location","pathname","match","parseInt","join","sx","my","style","display","marginTop","src","alt","margin","maxWidth","width","flexDirection","alignItems","height","FormControl","variant","TextField","InputProps","endAdornment","cursor","onClick","id","onKeyPress","key","label","onChange","target","Button","disabled","size","CardWithTable","header","Card","marginBottom","borderRadius","CardContent","TableContainer","Table","Captains","parsedData","CardHeader","title","textAlign","TableHead","TableRow","TableCell","TableBody","captains","c","captain","captainedBy","getChipName","chip","Chips","chips","usedBy","DataPage","managers","sort","b","manager","gw_team","entry_history","player_name","toFixed","navBarBgColor","theme","createTheme","palette","mode","background","default","paper","primary","main","secondary","error","red","A400","navStyles","navLinks","icon","text","NavBar","page","setPage","league_curr","latestGw","history","useHistory","AppBar","position","Toolbar","push","maxHeight","paddingBlock","Box","xs","md","Tabs","marginLeft","_event","newValue","navlink","Tab","toLowerCase","Typography","name","BottomNavigation","zIndex","bottom","left","right","showLabels","BottomNavigationAction","Players","setFilter","fullWidth","players","plr","player","filterPlayers","ownedBy","ChipsUsed","event","CompareGrid","headerText","team1","team2","Grid","sm","item","direction","ep","CompareManager","enemy","setEnemy","InputLabel","Select","labelId","i","newEnemy","mngrObj","MenuItem","container","justifyContent","ManagerPage","setManagerPage","Link","href","entry","rel","is_captain","is_vice_captain","stats","total_points","event_transfers_cost","points","PointsBox","gwPoints","totalPoints","TeamBox","entry_name","StandingsRow","old_rank","arrow","typoStyles","marginRight","marginBlock","iconStyles","getRankCell","rank","color","getRank","StandingsRows","standings","setStandings","oldRanks","mgrObj","prev_points","standingsTemp","managerObject","oldTotal","gwTotal","parsedPicks","active","findIndex","or","s","Standings","managerPage","handleRefresh","liveElementsRequest","alignContent","IconButton","fontSize","Transfers","transfers","transfer","active_chip","element_in","element_out","League","paddingBottom","pageToShow","App","fetchBssData","bssRequest","Container","ReactDOM","render","ThemeProvider","CssBaseline","action","gws","events","finished","dd_diff","Date","deadline_time","reverse","getGWs","document","querySelector"],"mappings":"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","file":"static/js/main.10ea50ff.chunk.js","sourcesContent":["import { SignalWifi0Bar } from \"@material-ui/icons\";\nimport { DataType } from \"./types/data\";\nimport { LiveData } from \"./types/livedata\";\nimport { PlayerPick } from \"./types/newleague\";\n\nexport const getPlayerName = (\n  element: DataType[\"elements\"][0] | null\n): string => {\n  if (!element) return \"\";\n  const first_name =\n    element.first_name.length < 10\n      ? element.first_name\n      : element.first_name.split(\" \")[0];\n  const fullname = first_name + \" \" + element.second_name;\n\n  return fullname.length < 20 ? fullname : element.web_name;\n};\n\nexport const getPlayerWebName = (\n  element: DataType[\"elements\"][0] | null\n): string => {\n  if (!element) return \"\";\n  return element.web_name;\n};\n\nexport const getPlayerPosition = (element: DataType[\"elements\"][0]) => {\n  switch (element.element_type) {\n    case 1:\n      return \"GKP\";\n    case 2:\n      return \"DEF\";\n    case 3:\n      return \"MID\";\n    case 4:\n      return \"FWD\";\n    default:\n      return \"\";\n  }\n};\n\nexport const getElementType = (a: DataType[\"elements\"][0] | undefined) => {\n  if (a) return a.element_type;\n  else return 0;\n};\n\nexport const getElementsTeam = (\n  element: DataType[\"elements\"][0],\n  teams: DataType[\"teams\"]\n) => {\n  const team = teams[element.team - 1].short_name || \"no\";\n  return team;\n};\n\nexport const getGWs = (events: DataType[\"events\"]): DataType[\"events\"] => {\n  let gws = events.filter((e) => e.finished);\n  const delay = 20 * 60 * 1000;\n  for (let e of events) {\n    // @ts-ignore\n    const dd_diff = new Date() - new Date(e.deadline_time);\n    if (!e.finished && dd_diff > delay) {\n      gws.push(e);\n    }\n  }\n  return gws.reverse();\n};\n\nexport const stillToPlay = (pick: number, liveData: LiveData): boolean => {\n  const element = liveData.elements[pick];\n  if (!element) return false;\n  const fixFinished: boolean[] = element.explain.map((e) => {\n    const fixture = liveData.fixtures[e.fixture];\n    if (!fixture?.finished_provisional) return true;\n    else return false;\n  });\n  return fixFinished.includes(true);\n};\n\nexport const fromTeamToPlay = (\n  liveData: LiveData,\n  picks: PlayerPick[]\n): string => {\n  const picksStillToPlay = picks.reduce((prev, curr) => {\n    const element = liveData.elements[curr.element];\n    if (!element || curr.multiplier < 1) return prev;\n    const fixture =\n      element.explain.filter(\n        (e) => !liveData.fixtures[e.fixture]?.finished_provisional\n      ).length + prev;\n    return fixture;\n  }, 0);\n  const totalMatches = picks.reduce((prev, curr) => {\n    const element = liveData.elements[curr.element];\n    if (!element || curr.multiplier < 1) return prev;\n    return element.explain.length + prev;\n  }, 0);\n  const picksDone = totalMatches - picksStillToPlay;\n  const returnString = picksDone + \"/\" + totalMatches;\n  return returnString;\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { DataType } from \"../types/data\";\nimport { LiveData } from \"../types/livedata\";\nimport { CurrPrevAndParsedLeague } from \"../types/newleague\";\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  bssData: DataType | null;\n  leagueData: CurrPrevAndParsedLeague | null;\n  gwsData: DataType[\"events\"];\n  selectedGw: string;\n  liveData: LiveData | null;\n};\n\nconst initialState: State = {\n  bssData: null,\n  leagueData: null,\n  gwsData: [],\n  selectedGw: \"\",\n  liveData: null,\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","const baseUrl =\n  process.env.NODE_ENV == \"development\" ? \"http://localhost:3636/api\" : \"/api\";\nimport axios from \"axios\";\nimport { LeagueFetchType, LiveFetchType } from \"./types/fetchTypes\";\n\nexport const getBssData = async () => {\n  return await axios.get(`${baseUrl}/data`);\n};\n\nexport const getLeague = async (params: LeagueFetchType) => {\n  return await axios.post(`${baseUrl}/league`, params);\n};\n\nexport const getLiveElements = async (params: LiveFetchType) => {\n  return await axios.post(`${baseUrl}/live`, params);\n};\n\nexport const getTeamForChips = async (id: any) => {\n  return await axios.post(`${baseUrl}/team`, id);\n};\n","import { Button, FormControl, TextField } from \"@material-ui/core\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport { Box } from \"@material-ui/system\";\nimport React, { useEffect, useState } from \"react\";\nimport { getLeague, getLiveElements } from \"./service\";\nimport { useStateValue } from \"./state\";\nimport { LeagueFetchType, LiveFetchType } from \"./types/fetchTypes\";\nimport { LiveData } from \"./types/livedata\";\nimport { CurrPrevAndParsedLeague } from \"./types/newleague\";\n\nconst Landing: React.FC = () => {\n  const [{ selectedGw }, dispatch] = useStateValue();\n  const [displayUrl, setDisplayUrl] = useState<boolean>(false);\n  const [leagueId, setLeagueId] = useState<string>(\"\");\n  const [userSelectedGW, setUserSelectedGW] = useState<string>(selectedGw);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const fetchLeague = async (gw: number, leagueId: string) => {\n    if (!gw || !leagueId) return;\n    try {\n      const params: LiveFetchType = { gw: gw.toString() };\n      const liveRequest = await getLiveElements(params);\n      if (liveRequest.status == 200 && liveRequest.data) {\n        const liveData: LiveData = liveRequest.data;\n        dispatch({ type: \"SET_LIVE_ELEMENTS\", payload: liveData });\n      }\n    } catch (error) {\n      console.log(\"error:\", error);\n    }\n    try {\n      setLoading(true);\n      const params: LeagueFetchType = { gw: gw.toString(), leagueId };\n      const leagueRequest = await getLeague(params);\n      if (leagueRequest.status == 200 && leagueRequest.data) {\n        const league: CurrPrevAndParsedLeague = leagueRequest.data;\n        if (userSelectedGW)\n          dispatch({ type: \"SET_SELECTED_GW\", payload: userSelectedGW });\n        window.localStorage.setItem(\"usersPreviousLeagueID\", leagueId);\n        dispatch({ type: \"SET_LEAGUE_DATA\", payload: league });\n        setLoading(false);\n      }\n    } catch {\n      alert(\"No league found or FPL is being updated\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const usersPreviousId = window.localStorage.getItem(\n      \"usersPreviousLeagueID\"\n    );\n    if (usersPreviousId) setLeagueId(usersPreviousId);\n  }, []);\n\n  useEffect(() => {\n    setUserSelectedGW(selectedGw);\n    const idFromBrowser = window.location.pathname.match(/[0-9]/g);\n    if (idFromBrowser) {\n      fetchLeague(parseInt(selectedGw), idFromBrowser.join(\"\").toString());\n    }\n  }, [selectedGw]);\n\n  return (\n    <>\n      <Box sx={{ my: 4 }} style={{ display: \"flex\", marginTop: \"10%\" }}>\n        <img\n          src=\"/images/logo512.png\"\n          alt=\"logo\"\n          style={{ margin: \"auto\", maxWidth: \"500px\", width: \"75%\" }}\n        />\n      </Box>\n      <Box\n        sx={{ my: 4 }}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <Box\n          style={{\n            width: 300,\n            height: 20,\n          }}\n        >\n          {displayUrl ? (\n            <img\n              src=\"/images/urlpic.png\"\n              alt=\"urlpic\"\n              style={{ maxWidth: 300 }}\n            />\n          ) : null}\n        </Box>\n        <FormControl margin=\"normal\" variant=\"filled\" style={{ width: 300 }}>\n          <TextField\n            InputProps={{\n              endAdornment: (\n                <Box>\n                  <HelpIcon\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setDisplayUrl(!displayUrl)}\n                  />\n                </Box>\n              ),\n            }}\n            id=\"leagueId\"\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\")\n                fetchLeague(parseInt(userSelectedGW), leagueId);\n            }}\n            value={leagueId}\n            label=\"League ID\"\n            onChange={(e) => setLeagueId(e.target.value)}\n          />\n        </FormControl>\n        <Button\n          style={{ marginTop: 15 }}\n          disabled={loading}\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => fetchLeague(parseInt(userSelectedGW), leagueId)}\n        >\n          {loading ? \"Loading...\" : \"Go!\"}\n        </Button>\n      </Box>\n    </>\n  );\n};\nexport default Landing;\n","import { Card, CardContent, Table, TableContainer } from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface CardWithTableProps {\n  header?: any | null;\n}\n\nconst CardWithTable: React.FC<CardWithTableProps> = ({\n  children,\n  header = null,\n}) => {\n  return (\n    <Card\n      variant=\"elevation\"\n      style={{ marginBottom: \"20px\", borderRadius: \"5px\" }}\n    >\n      <CardContent>\n        {header}\n        <TableContainer>\n          <Table>{children}</Table>\n        </TableContainer>\n      </CardContent>\n    </Card>\n  );\n};\nexport default CardWithTable;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerWebName } from \"../tools\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst Captains: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData?.parsedData) return null;\n  return (\n    <CardWithTable\n      header={<CardHeader title={\"Captains\"} style={{ textAlign: \"center\" }} />}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Captain</TableCell>\n          <TableCell>Owners</TableCell>\n          <TableCell>#</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.captains.map((c) => {\n          return (\n            <TableRow key={c.captain}>\n              <TableCell>\n                {getPlayerWebName(bssData.elements[c.captain])}\n              </TableCell>\n              <TableCell>{c.captainedBy.join(\", \")}</TableCell>\n              <TableCell>{c.captainedBy.length} </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Captains;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport CardWithTable from \"./CardWithTable\";\n\nexport const getChipName = (chip: string): string => {\n  switch (chip) {\n    case \"wildcard\":\n      return \"Wildcard\";\n    case \"3xc\":\n      return \"Triple Captain\";\n    case \"freehit\":\n      return \"Freehit\";\n    case \"bboost\":\n      return \"Bench Boost\";\n    default:\n      return \"\";\n  }\n};\nconst Chips: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (\n    !bssData ||\n    !leagueData?.parsedData ||\n    leagueData.parsedData.chips.length < 1\n  )\n    return null;\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Chips played\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Chip</TableCell>\n          <TableCell>Used by</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.chips.map((c) => {\n          return (\n            <TableRow key={c.chip}>\n              <TableCell>{getChipName(c.chip)}</TableCell>\n              <TableCell>{c.usedBy.join(\", \")}</TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Chips;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { useStateValue } from \"../state\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst DataPage: React.FC<{}> = () => {\n  const [{ leagueData }] = useStateValue();\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Team values\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Manager</TableCell>\n          <TableCell>Value</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData?.parsedData.managers\n          .sort(\n            (a, b) =>\n              b.manager.gw_team.entry_history.value -\n              a.manager.gw_team.entry_history.value\n          )\n          .map((manager) => {\n            return (\n              <TableRow key={manager.manager.id}>\n                <TableCell>{manager.manager.player_name}</TableCell>\n                <TableCell>\n                  {(manager.manager.gw_team.entry_history.value / 10).toFixed(\n                    1\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\n\nexport default DataPage;\n","import { createTheme } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\n\n// A custom theme for this app\nexport const navBarBgColor = \"#13181F\";\nconst theme = createTheme({\n  palette: {\n    // type: \"dark\",\n    mode: \"dark\",\n    background: {\n      default: \"#171c24\",\n      paper: \"#222b36\",\n    },\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n});\n\nexport default theme;\n","import {\n  AppBar,\n  BottomNavigationAction,\n  Box,\n  Tab,\n  Tabs,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport InsertChartIcon from \"@material-ui/icons/InsertChart\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStateValue } from \"../state\";\nimport { navBarBgColor } from \"../theme\";\n\nconst navStyles = { margin: \"auto\" };\nconst navLinks = [\n  {\n    icon: <HomeIcon style={navStyles} />,\n    text: \"Main\",\n  },\n  {\n    icon: <SwapHorizIcon style={navStyles} />,\n    text: \"Transfers\",\n  },\n  {\n    icon: <ListAltIcon style={navStyles} />,\n    text: \"Standings\",\n  },\n  {\n    icon: <InsertChartIcon style={navStyles} />,\n    text: \"Values\",\n  },\n];\n\ninterface NavBarProps {\n  setPage: any;\n  page: string;\n}\n\nconst NavBar: React.FC<NavBarProps> = ({ page, setPage }) => {\n  const [{ leagueData, selectedGw, gwsData }, dispatch] = useStateValue();\n  if (!leagueData?.league_curr.managers) return null;\n  const latestGw: boolean = gwsData[0].id.toString() == selectedGw;\n  const history = useHistory();\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar style={{ background: navBarBgColor }}>\n          <img\n            onClick={() => {\n              dispatch({ type: \"RESET_LEAGUE_DATA\", payload: null });\n              history.push(\"/\");\n            }}\n            src=\"/images/logo192.png\"\n            alt=\"logo\"\n            style={{\n              maxHeight: \"75%\",\n              maxWidth: 80,\n              paddingBlock: 7,\n              cursor: \"pointer\",\n            }}\n          />\n          <Box display={{ xs: \"none\", md: \"flex\" }}>\n            <Tabs\n              style={{ marginLeft: 15 }}\n              value={page}\n              onChange={(_event, newValue) => {\n                setPage(newValue);\n              }}\n            >\n              {navLinks.map((navlink) => (\n                <Tab\n                  key={navlink.text}\n                  value={navlink.text.toLowerCase()}\n                  icon={navlink.icon}\n                  label={navlink.text}\n                  disabled={navlink.text == \"Standings\" && !latestGw}\n                />\n              ))}\n            </Tabs>\n          </Box>\n          <Typography style={{ marginLeft: \"auto\" }} variant=\"h5\">\n            {`${leagueData?.league_curr.league.name}${\n              leagueData?.league_curr.managers.length > 49 ? \" (Top 50)\" : \"\"\n            }, Gameweek ${selectedGw}`}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Box display={{ md: \"none\" }}>\n        <BottomNavigation\n          style={{\n            zIndex: 999999999,\n            background: navBarBgColor,\n            position: \"fixed\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n          }}\n          value={page}\n          onChange={(_event, newValue) => {\n            setPage(newValue);\n          }}\n          showLabels\n        >\n          {navLinks.map((navlink) => (\n            <BottomNavigationAction\n              key={navlink.text}\n              value={navlink.text.toLowerCase()}\n              label={navlink.text}\n              icon={navlink.icon}\n            />\n          ))}\n        </BottomNavigation>\n      </Box>\n    </>\n  );\n};\nexport default NavBar;\n","import {\n  Button,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerName, getPlayerWebName } from \"../tools\";\nimport { Player } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst Players: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData) return null;\n  const [filter, setFilter] = useState<string>(\"\");\n  const filterPlayers = (filter: string, players: Player[]) => {\n    if (filter == \"\") return players;\n    return players.filter((plr) =>\n      getPlayerName(bssData.elements[plr.player]).toLowerCase().includes(filter)\n    );\n  };\n  return (\n    <CardWithTable\n      header={\n        <>\n          <TextField\n            fullWidth\n            value={filter || \"\"}\n            InputProps={{\n              endAdornment: (\n                <Button variant=\"text\" onClick={() => setFilter(\"\")}>\n                  Clear\n                </Button>\n              ),\n            }}\n            label={`Search from ${leagueData.parsedData.players.length} players...`}\n            onChange={(e) => setFilter(e.target.value.toLowerCase())}\n          />\n        </>\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Player</TableCell>\n          <TableCell>Owners</TableCell>\n          <TableCell>#</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {filterPlayers(filter, leagueData.parsedData.players).map((plr) => (\n          <TableRow key={plr.player}>\n            <TableCell>\n              {getPlayerWebName(bssData.elements[plr.player])}\n            </TableCell>\n            <TableCell>{plr.ownedBy.join(\", \")}</TableCell>\n            <TableCell>{plr.ownedBy.length}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Players;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { Box } from \"@material-ui/system\";\nimport { FC } from \"react\";\nimport { Manager } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\nimport { getChipName } from \"./Chips\";\n\ninterface ChipsUsedType {\n  manager: Manager;\n}\n\nconst ChipsUsed: FC<ChipsUsedType> = ({ manager }) => {\n  return (\n    <Box>\n      <CardWithTable\n        header={\n          <CardHeader\n            title={\"Chips used\"}\n            style={{ textAlign: \"center\" }}\n          ></CardHeader>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>GW</TableCell>\n            <TableCell>Chip</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {manager.history.chips.map((chip) => {\n            return (\n              <TableRow key={chip.event}>\n                <TableCell>{chip.event}</TableCell>\n                <TableCell>{getChipName(chip.name || \"\")}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </CardWithTable>\n    </Box>\n  );\n};\nexport default ChipsUsed;\n","import { Grid, Typography } from \"@material-ui/core\";\nimport { FC } from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getElementType, getPlayerName } from \"../tools\";\nimport { Manager } from \"../types/newleague\";\n\ninterface CompareGridType {\n  headerText: string;\n  team1: Manager;\n  team2: Manager;\n}\n\nconst CompareGrid: FC<CompareGridType> = ({ headerText, team1, team2 }) => {\n  const [{ bssData }] = useStateValue();\n  return (\n    <Grid xs={12} sm={6} md={4} item direction=\"column\">\n      <Typography variant=\"h6\">{headerText}</Typography>\n      {team1.gw_team.picks\n        .filter(\n          (pick) =>\n            !team2.gw_team.picks.map((ep) => ep.element).includes(pick.element)\n        )\n        .sort(\n          (a, b) =>\n            getElementType(bssData?.elements[a.element]) -\n            getElementType(bssData?.elements[b.element])\n        )\n        .map((pick) => (\n          <Typography key={pick.element} variant=\"body2\">\n            {getPlayerName(bssData?.elements[pick.element] || null)}\n          </Typography>\n        ))}\n    </Grid>\n  );\n};\n\nexport default CompareGrid;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  FormControl,\n  Grid,\n  InputLabel,\n  MenuItem,\n  Select,\n  SelectChangeEvent,\n  Typography,\n} from \"@material-ui/core\";\nimport { Box } from \"@material-ui/system\";\nimport { FC, useState } from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getElementType, getPlayerName } from \"../tools\";\nimport { Manager } from \"../types/newleague\";\nimport CompareGrid from \"./CompareGrid\";\n\ninterface CompareManagerType {\n  manager: Manager;\n}\n\nconst CompareManager: FC<CompareManagerType> = ({ manager }) => {\n  const [enemy, setEnemy] = useState<Manager | null>(null);\n  const [{ leagueData, bssData }] = useStateValue();\n  const handleChange = (event: SelectChangeEvent) => {\n    const i: number = parseInt(event.target.value) || 0;\n    const newEnemy: Manager | null =\n      leagueData?.parsedData.managers[i].manager || null;\n    setEnemy(newEnemy);\n  };\n  return (\n    <Box>\n      <Card\n        variant=\"elevation\"\n        style={{ marginBottom: \"20px\", borderRadius: \"5px\" }}\n      >\n        <CardContent>\n          <CardHeader\n            title={\"Compare to\"}\n            style={{ textAlign: \"center\" }}\n          ></CardHeader>\n          <FormControl fullWidth>\n            <InputLabel id=\"compare-id\">Select another manager</InputLabel>\n            <Select\n              variant=\"standard\"\n              labelId=\"compare-id\"\n              id=\"compare-select\"\n              // value={enemy}\n              label=\"Compare to\"\n              onChange={handleChange}\n            >\n              {leagueData?.parsedData?.managers.map((mngrObj, i) => (\n                <MenuItem value={i}>{mngrObj.manager.player_name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          {manager && enemy ? (\n            <Grid container marginTop={5}>\n              <Grid item container display=\"flex\" justifyContent=\"left\">\n                <CompareGrid\n                  headerText={manager.player_name}\n                  team1={manager}\n                  team2={enemy}\n                />\n                <CompareGrid\n                  headerText={enemy.player_name}\n                  team1={enemy}\n                  team2={manager}\n                />\n                <Grid xs={12} sm={6} md={4} item direction=\"column\">\n                  <Typography variant=\"h6\">Mutual</Typography>\n                  {enemy.gw_team.picks\n                    .filter((pick) =>\n                      manager.gw_team.picks\n                        .map((ep) => ep.element)\n                        .includes(pick.element)\n                    )\n                    .sort(\n                      (a, b) =>\n                        getElementType(bssData?.elements[a.element]) -\n                        getElementType(bssData?.elements[b.element])\n                    )\n                    .map((pick) => (\n                      <Typography key={pick.element} variant=\"body2\">\n                        {getPlayerName(bssData?.elements[pick.element] || null)}\n                      </Typography>\n                    ))}\n                </Grid>\n              </Grid>\n            </Grid>\n          ) : null}\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\nexport default CompareManager;\n","import {\n  Button,\n  CardHeader,\n  Grid,\n  Link,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport {\n  getElementsTeam,\n  getPlayerName,\n  getPlayerPosition,\n  stillToPlay,\n} from \"../tools\";\nimport { Manager } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\nimport ChipsUsed from \"./ChipsUsed\";\nimport CompareManager from \"./CompareManager\";\n\nexport interface ManagerPageType {\n  manager: Manager;\n  points: number;\n}\n\ninterface ManagerPageProps {\n  manager: ManagerPageType;\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\n\nconst ManagerPage: React.FC<ManagerPageProps> = ({\n  manager,\n  setManagerPage,\n}) => {\n  const [{ bssData, liveData, selectedGw }] = useStateValue();\n  if (!bssData?.elements || !liveData?.elements) return null;\n  return (\n    <>\n      <CardWithTable\n        header={\n          <Grid container>\n            <Grid\n              item\n              xs={3}\n              display=\"flex\"\n              justifyContent=\"left\"\n              alignItems=\"center\"\n            >\n              <Button onClick={() => setManagerPage(null)} variant=\"contained\">\n                Back\n              </Button>\n            </Grid>\n            <Grid item xs={6}>\n              <CardHeader\n                title={manager.manager.player_name}\n                style={{ textAlign: \"center\" }}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={3}\n              display=\"flex\"\n              direction=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Link\n                href={`https://fantasy.premierleague.com/entry/${manager.manager.entry}/event/${selectedGw}/`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <Button variant=\"contained\">FPL</Button>\n              </Link>\n            </Grid>\n          </Grid>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Player</TableCell>\n            <TableCell>Team</TableCell>\n            <TableCell>Position</TableCell>\n            <TableCell>Points</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {manager.manager.gw_team.picks\n            .filter((pick) => pick.multiplier > 0)\n            .map((pick) => {\n              return (\n                <TableRow key={pick.element}>\n                  <TableCell>\n                    {getPlayerName(bssData.elements[pick.element])}\n                    {pick.is_captain ? \" (C)\" : \"\"}\n                    {pick.is_vice_captain ? \" (V)\" : \"\"}\n                    {stillToPlay(pick.element, liveData) ? \" 🟢\" : \" 🏁\"}\n                  </TableCell>\n                  <TableCell>\n                    {getElementsTeam(\n                      bssData.elements[pick.element],\n                      bssData.teams\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {getPlayerPosition(bssData.elements[pick.element])}\n                  </TableCell>\n                  <TableCell>\n                    {liveData.elements[pick.element]?.stats.total_points ||\n                      0 * pick.multiplier}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          {manager.manager.gw_team.entry_history.event_transfers_cost ==\n          0 ? null : (\n            <TableRow>\n              <TableCell>Transfers cost</TableCell>\n              <TableCell></TableCell>\n              <TableCell></TableCell>\n              <TableCell>\n                {manager.manager.gw_team.entry_history.event_transfers_cost *\n                  -1}\n              </TableCell>\n            </TableRow>\n          )}\n          <TableRow>\n            <TableCell>Total</TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell>{manager.points}</TableCell>\n          </TableRow>\n        </TableBody>\n      </CardWithTable>\n      <CardWithTable\n        header={\n          <CardHeader\n            title={\"Bench\"}\n            style={{ textAlign: \"center\" }}\n          ></CardHeader>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Player</TableCell>\n            <TableCell>Team</TableCell>\n            <TableCell>Position</TableCell>\n            <TableCell>Points</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {manager.manager.gw_team.picks\n            .filter((pick) => pick.multiplier == 0)\n            .map((pick) => {\n              return (\n                <TableRow key={pick.element}>\n                  <TableCell>\n                    {getPlayerName(bssData.elements[pick.element])}\n                    {stillToPlay(pick.element, liveData) ? \" 🟢\" : \" 🏁\"}\n                  </TableCell>\n                  <TableCell>\n                    {getElementsTeam(\n                      bssData.elements[pick.element],\n                      bssData.teams\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {getPlayerPosition(bssData.elements[pick.element])}\n                  </TableCell>\n                  <TableCell>\n                    {liveData.elements[pick.element]?.stats.total_points}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n        </TableBody>\n      </CardWithTable>\n      <ChipsUsed manager={manager.manager} />\n      <CompareManager manager={manager.manager} />\n    </>\n  );\n};\nexport default ManagerPage;\n","import { Box } from \"@material-ui/system\";\nimport { FC } from \"react\";\n\ninterface PointsBoxType {\n  gwPoints: number;\n  totalPoints: number;\n}\n\nconst PointsBox: FC<PointsBoxType> = ({ gwPoints, totalPoints }) => {\n  return (\n    <Box>\n      <Box>{gwPoints} /</Box>\n      <Box>{totalPoints}</Box>\n    </Box>\n  );\n};\nexport default PointsBox;\n","import { Link } from \"@material-ui/core\";\nimport { Box } from \"@material-ui/system\";\nimport React, { FC } from \"react\";\nimport { Manager } from \"../types/newleague\";\n\ninterface TeamBoxType {\n  manager: Manager;\n}\nconst TeamBox: FC<TeamBoxType> = ({ manager }) => {\n  return (\n    <Box>\n      <Link\n      // href={`https://fantasy.premierleague.com/entry/${manager.entry}/event/12/`}\n      >\n        <Box>{manager.entry_name}</Box>\n      </Link>\n      <Box>{manager.player_name}</Box>\n    </Box>\n  );\n};\nexport default TeamBox;\n","import {\n  Box,\n  CardHeader,\n  Grid,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { FC, useEffect, useState } from \"react\";\nimport { getLiveElements } from \"../service\";\nimport { useStateValue } from \"../state\";\nimport { fromTeamToPlay } from \"../tools\";\nimport { LiveFetchType } from \"../types/fetchTypes\";\nimport { LiveData } from \"../types/livedata\";\nimport { Manager, ParsedManagerPick } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\nimport ManagerPage, { ManagerPageType } from \"./ManagerPage\";\nimport PointsBox from \"./PointsBox\";\nimport TeamBox from \"./TeamBox\";\n\ninterface StandingsRowType {\n  manager: Manager;\n  gwPoints: number;\n  totalPoints: number;\n  i?: number;\n  old_rank: number;\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\nconst StandingsRow: FC<StandingsRowType> = ({\n  gwPoints,\n  totalPoints,\n  manager,\n  setManagerPage,\n  old_rank,\n  i = 1,\n}) => {\n  const [{ liveData }] = useStateValue();\n  if (!liveData) return null;\n  const getRank = () => {\n    const arrow = old_rank > i ? 0 : old_rank < i ? 2 : 1;\n    const typoStyles: React.CSSProperties = {\n      marginRight: 5,\n      marginBlock: \"auto\",\n    };\n    const iconStyles: React.CSSProperties = {\n      marginBlock: \"auto\",\n    };\n    const getRankCell = (rank: number, icon: any) => (\n      <Box display=\"flex\">\n        <Typography style={typoStyles} variant=\"button\">\n          {rank}\n        </Typography>\n        {icon}\n      </Box>\n    );\n    if (arrow == 0)\n      return getRankCell(\n        i,\n        <KeyboardArrowUpIcon color=\"primary\" style={iconStyles} />\n      );\n    else if (arrow == 1)\n      return getRankCell(\n        i,\n        <FiberManualRecordIcon color=\"disabled\" style={iconStyles} />\n      );\n    else\n      return getRankCell(\n        i,\n        <KeyboardArrowDownIcon color=\"error\" style={iconStyles} />\n      );\n  };\n  return (\n    <TableRow\n      style={{ cursor: \"pointer\" }}\n      onClick={() =>\n        setManagerPage(manager ? { manager: manager, points: gwPoints } : null)\n      }\n      key={i}\n    >\n      <TableCell>{getRank()}</TableCell>\n      <TableCell>\n        <TeamBox manager={manager} />\n      </TableCell>\n      <TableCell>\n        {fromTeamToPlay(\n          liveData,\n          manager.gw_team.picks.filter((pick) => pick.multiplier > 0)\n        )}\n      </TableCell>\n      <TableCell>\n        <PointsBox gwPoints={gwPoints} totalPoints={totalPoints} />\n      </TableCell>\n      {/* <TableCell>{gwPoints}</TableCell> */}\n      {/* <TableCell>{totalPoints}</TableCell> */}\n    </TableRow>\n  );\n};\n\ninterface StandingsRowsType {\n  managers: ParsedManagerPick[];\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\n\ninterface OldRankType {\n  id: number;\n  prev_points: number;\n}\n\nconst StandingsRows: FC<StandingsRowsType> = ({ managers, setManagerPage }) => {\n  const [{ liveData }] = useStateValue();\n  const [standings, setStandings] = useState<StandingsRowType[]>([]);\n  const oldRanks: OldRankType[] = managers\n    .map((mgrObj) => {\n      const oldRankObj = {\n        id: mgrObj.manager.id,\n        prev_points: mgrObj.manager.prev_points,\n      };\n      return oldRankObj;\n    })\n    .sort((a, b) => b.prev_points - a.prev_points);\n  if (!liveData?.elements) return null;\n  useEffect(() => {\n    const standingsTemp: StandingsRowType[] = [];\n    for (const managerObject of managers) {\n      const { gw_team } = managerObject.manager;\n      const oldTotal: number = managerObject.manager.prev_points;\n      let gwTotal: number = gw_team.entry_history.event_transfers_cost * -1;\n      for (const pick of managerObject.parsedPicks.active) {\n        const i = pick.element;\n        const livePoints = liveData.elements[i]?.stats.total_points || 0;\n        gwTotal += livePoints * pick.multiplier;\n      }\n      standingsTemp.push({\n        manager: managerObject.manager,\n        gwPoints: gwTotal,\n        totalPoints: oldTotal + gwTotal,\n        setManagerPage: setManagerPage,\n        old_rank:\n          1 + oldRanks.findIndex((or) => or.id === managerObject.manager.id),\n      });\n    }\n    standingsTemp.sort((a, b) => b.totalPoints - a.totalPoints);\n    setStandings(standingsTemp);\n  }, [liveData]);\n  return (\n    <>\n      {standings.map((s, i) => (\n        <StandingsRow key={i} {...s} i={i + 1} />\n      ))}\n    </>\n  );\n};\n\nconst Standings: FC = () => {\n  const [{ leagueData, selectedGw }, dispatch] = useStateValue();\n  if (!leagueData?.parsedData) return null;\n  const [managerPage, setManagerPage] = useState<ManagerPageType | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const handleRefresh = async () => {\n    setLoading(true);\n    const params: LiveFetchType = { gw: selectedGw };\n    const liveElementsRequest = await getLiveElements(params);\n    if (liveElementsRequest.status == 200 && liveElementsRequest.data) {\n      const data: LiveData = liveElementsRequest.data;\n      dispatch({ type: \"SET_LIVE_ELEMENTS\", payload: data });\n    } else alert(\"Refresh failed\");\n    setLoading(false);\n  };\n  if (managerPage)\n    return (\n      <ManagerPage setManagerPage={setManagerPage} manager={managerPage} />\n    );\n  return (\n    <>\n      <CardWithTable\n        header={\n          <Grid container alignContent=\"space-between\">\n            <Grid item xs={2}>\n              {\" \"}\n            </Grid>\n            <Grid item xs={8}>\n              <CardHeader title={\"Standings\"} style={{ textAlign: \"center\" }} />\n            </Grid>\n            <Grid container item xs={2} alignContent=\"center\">\n              <IconButton\n                disabled={loading}\n                onClick={() => handleRefresh()}\n                style={{ margin: \"auto\", cursor: \"pointer\" }}\n              >\n                <RefreshIcon fontSize=\"large\" />\n              </IconButton>\n            </Grid>\n          </Grid>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Rank</TableCell>\n            <TableCell>Manager</TableCell>\n            <TableCell>\n              <Box>🏁</Box>\n            </TableCell>\n            <TableCell>\n              <Box>\n                <Box>GW / </Box>\n                <Box>Tot </Box>\n              </Box>\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <StandingsRows\n            setManagerPage={setManagerPage}\n            managers={leagueData.parsedData.managers}\n          />\n        </TableBody>\n      </CardWithTable>\n    </>\n  );\n};\n\nexport default Standings;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerWebName } from \"../tools\";\nimport CardWithTable from \"./CardWithTable\";\n\n// interface TransfersProps {}\n\nconst Transfers: React.FC = () => {\n  const [{ bssData, leagueData, selectedGw }] = useStateValue();\n  if (!bssData) return null;\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Transfers\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Manager</TableCell>\n          <TableCell>In</TableCell>\n          <TableCell>Out</TableCell>\n          <TableCell>-</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData?.league_curr.managers\n          .filter(\n            (manager) =>\n              manager.transfers.filter(\n                (transfer) => transfer.event === parseInt(selectedGw)\n              ).length > 0\n          )\n          .map((manager) => (\n            <TableRow key={manager.id}>\n              <TableCell>{manager.player_name}</TableCell>\n              <TableCell>\n                {manager.gw_team.active_chip === \"freehit\"\n                  ? \"*Freehit*\"\n                  : manager.gw_team.active_chip === \"wildcard\"\n                  ? \"*Wildcard*\"\n                  : manager.transfers\n                      .filter(\n                        (transfer) => transfer.event === parseInt(selectedGw)\n                      )\n                      .map((transfer) =>\n                        getPlayerWebName(bssData.elements[transfer.element_in])\n                      )\n                      .join(\", \")}\n              </TableCell>\n              <TableCell>\n                {manager.gw_team.active_chip === \"freehit\"\n                  ? \"*Freehit*\"\n                  : manager.gw_team.active_chip === \"wildcard\"\n                  ? \"*Wildcard*\"\n                  : manager.transfers\n                      .filter(\n                        (transfer) => transfer.event === parseInt(selectedGw)\n                      )\n                      .map((transfer) =>\n                        getPlayerWebName(bssData.elements[transfer.element_out])\n                      )\n                      .join(\", \")}\n              </TableCell>\n              <TableCell>\n                {manager.gw_team.entry_history.event_transfers_cost !== 0\n                  ? manager.gw_team.entry_history.event_transfers_cost\n                  : null}\n              </TableCell>\n            </TableRow>\n          ))}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Transfers;\n","import { Box } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport Captains from \"./components/Captains\";\nimport Chips from \"./components/Chips\";\nimport DataPage from \"./components/DataPage\";\nimport NavBar from \"./components/NavBar\";\nimport Players from \"./components/Players\";\nimport Standings from \"./components/Standings\";\nimport Transfers from \"./components/Transfers\";\n\ntype PageType = \"main\" | \"transfers\" | \"standings\" | \"values\";\n\nconst League: React.FC = () => {\n  const [page, setPage] = useState<PageType>(\"main\");\n  const pageToShow = (page: PageType) => {\n    switch (page) {\n      case \"main\":\n        return (\n          <>\n            <Chips />\n            <Captains />\n            <Players />\n          </>\n        );\n      case \"transfers\":\n        return <Transfers />;\n      case \"standings\":\n        return <Standings />;\n      case \"values\":\n        return <DataPage />;\n      default:\n        return null;\n    }\n  };\n  return (\n    <>\n      <NavBar page={page} setPage={setPage} />\n      <Box paddingBottom={10} marginTop={20}>\n        {pageToShow(page)}\n      </Box>\n    </>\n  );\n};\nexport default League;\n","import { Box } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport { useEffect } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Landing from \"./Landing\";\nimport League from \"./League\";\nimport { getBssData } from \"./service\";\nimport { useStateValue } from \"./state\";\nimport { DataType } from \"./types/data\";\n\nexport default function App(): JSX.Element {\n  const [{ leagueData }, dispatch] = useStateValue();\n  useEffect(() => {\n    const fetchBssData = async () => {\n      const bssRequest = await getBssData();\n      if (bssRequest.status == 200 && bssRequest.data) {\n        const data: DataType = bssRequest.data;\n        dispatch({ type: \"SET_BSS_DATA\", payload: data });\n      } else alert(\"The game is being updated.\");\n    };\n    fetchBssData();\n  }, []);\n\n  return (\n    <Router>\n      <Container maxWidth=\"lg\">\n        <Box height=\"100vh\">{leagueData ? <League /> : <Landing />}</Box>\n      </Container>\n    </Router>\n  );\n}\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport ReactDOM from \"react-dom\";\nimport { StateProvider, reducer } from \"./state\";\nimport App from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <StateProvider reducer={reducer}>\n      <App />\n    </StateProvider>\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n);\n","import { getGWs } from \"../tools\";\nimport { DataType } from \"../types/data\";\nimport { LiveData } from \"../types/livedata\";\nimport { CurrPrevAndParsedLeague } from \"../types/newleague\";\nimport { State } from \"./state\";\n\nexport type Action =\n  | {\n      type: \"SET_BSS_DATA\";\n      payload: DataType;\n    }\n  | {\n      type: \"SET_LEAGUE_DATA\";\n      payload: CurrPrevAndParsedLeague;\n    }\n  | {\n      type: \"RESET_LEAGUE_DATA\";\n      payload: any;\n    }\n  | {\n      type: \"SET_SELECTED_GW\";\n      payload: string;\n    }\n  | {\n      type: \"SET_LIVE_ELEMENTS\";\n      payload: LiveData;\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_BSS_DATA\":\n      const gws = getGWs(action.payload.events);\n      return {\n        ...state,\n        bssData: {\n          ...action.payload,\n        },\n        gwsData: gws,\n        selectedGw: gws[0].id.toString(),\n      };\n    case \"SET_LEAGUE_DATA\":\n      return {\n        ...state,\n        leagueData: {\n          ...action.payload,\n        },\n      };\n    case \"RESET_LEAGUE_DATA\":\n      return {\n        ...state,\n        leagueData: null,\n      };\n    case \"SET_SELECTED_GW\":\n      return {\n        ...state,\n        selectedGw: action.payload,\n      };\n    case \"SET_LIVE_ELEMENTS\":\n      return {\n        ...state,\n        liveData: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}