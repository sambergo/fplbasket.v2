{"version":3,"sources":["tools.ts","state/state.tsx","service.ts","Landing.tsx","components/CardWithTable.tsx","components/Captains.tsx","components/Chips.tsx","components/DataPage.tsx","theme.ts","components/NavBar.tsx","components/Players.tsx","components/ManagerPage.tsx","components/Standings.tsx","components/Transfers.tsx","League.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["getPlayerName","element","first_name","second_name","getPlayerPosition","element_type","initialState","bssData","leagueData","gwsData","selectedGw","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","baseUrl","getBssData","a","axios","get","getLeague","params","post","Landing","useState","displayUrl","setDisplayUrl","leagueId","setLeagueId","userSelectedGW","setUserSelectedGW","fetchLeague","gw","toString","leagueRequest","status","data","league","type","payload","window","localStorage","setItem","alert","useEffect","usersPreviousId","getItem","sx","my","style","display","marginTop","src","alt","margin","maxWidth","width","flexDirection","alignItems","height","FormControl","variant","TextField","InputProps","endAdornment","cursor","onClick","id","label","onChange","e","target","InputLabel","Select","labelId","defaultValue","map","MenuItem","Button","size","parseInt","CardWithTable","header","Card","marginBottom","borderRadius","CardContent","TableContainer","Table","Captains","parsedData","CardHeader","title","textAlign","TableHead","TableRow","TableCell","TableBody","captains","c","elements","captain","web_name","captainedBy","join","length","Chips","chips","getChipName","chip","usedBy","DataPage","managers","sort","b","manager","gw_team","entry_history","player_name","toFixed","navBarBgColor","theme","createTheme","palette","mode","background","default","paper","primary","main","secondary","error","red","A400","navStyles","navLinks","icon","text","NavBar","page","setPage","league_curr","latestGw","AppBar","position","Toolbar","maxHeight","paddingBlock","Box","xs","md","Tabs","marginLeft","_event","newValue","navlink","Tab","toLowerCase","disabled","Typography","name","BottomNavigation","bottom","left","right","event","showLabels","BottomNavigationAction","Players","filter","setFilter","fullWidth","players","plr","player","includes","filterPlayers","ownedBy","ManagerPage","setManagerPage","Grid","container","item","justifyContent","picks","pick","multiplier","is_captain","is_vice_captain","teams","team","event_points","points","StandingsRow","gwPoints","totalPoints","i","arrow","last_rank","typoStyles","marginRight","marginBlock","iconStyles","getRankCell","rank","color","getRank","StandingsRows","standings","managerObject","oldTotal","total_points","gwTotal","parsedPicks","active","push","s","Standings","managerPage","Transfers","transfers","managerName","transfersIn","t","transfersOut","transfersCost","League","paddingBottom","pageToShow","App","bssRequest","fetchBssData","Container","ReactDOM","render","ThemeProvider","CssBaseline","action","gws","events","finished","dd_diff","Date","deadline_time","reverse","getGWs","document","querySelector"],"mappings":"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","file":"static/js/main.ad1e15bb.chunk.js","sourcesContent":["import { DataType } from \"./types/data\";\n\nexport const getPlayerName = (\n  element: DataType[\"elements\"][0] | null\n): string => {\n  if (!element) return \"\";\n  return `${element.first_name} ${element.second_name}`;\n};\n\nexport const getPlayerPosition = (element: DataType[\"elements\"][0]) => {\n  switch (element.element_type) {\n    case 1:\n      return \"GKP\";\n    case 2:\n      return \"DEF\";\n    case 3:\n      return \"MID\";\n    case 4:\n      return \"FWD\";\n    default:\n      return \"\";\n  }\n};\n\nexport const getElementsTeam = (\n  element: DataType[\"elements\"][0],\n  teams: DataType[\"teams\"]\n) => {\n  const team = teams[element.team - 1].name || \"no\";\n  return team;\n};\n\nexport const getGWs = (events: DataType[\"events\"]): DataType[\"events\"] => {\n  let gws = events.filter((e) => e.finished);\n  const delay = 20 * 60 * 1000;\n  for (let e of events) {\n    // @ts-ignore\n    const dd_diff = new Date() - new Date(e.deadline_time);\n    if (!e.finished && dd_diff > delay) {\n      gws.push(e);\n    }\n  }\n  return gws.reverse();\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { DataType } from \"../types/data\";\nimport { CurrPrevAndParsedLeague } from \"../types/newleague\";\n\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  bssData: DataType | null;\n  leagueData: CurrPrevAndParsedLeague | null;\n  gwsData: DataType[\"events\"];\n  selectedGw: string;\n};\n\nconst initialState: State = {\n  bssData: null,\n  leagueData: null,\n  gwsData: [],\n  selectedGw: \"\",\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","const baseUrl =\n  process.env.NODE_ENV == \"development\" ? \"http://localhost:3636/api\" : \"/api\";\nimport axios from \"axios\";\nimport { LeagueFetchType } from \"./types/leagueFetchType\";\n\nexport const getBssData = async () => {\n  return await axios.get(`${baseUrl}/data`);\n};\n\nexport const getLeague = async (params: LeagueFetchType) => {\n  return await axios.post(`${baseUrl}/league`, params);\n};\n","import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport { Box } from \"@material-ui/system\";\nimport { getLeague } from \"./service\";\nimport { LeagueFetchType } from \"./types/leagueFetchType\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport React, { useEffect, useState } from \"react\";\nimport { useStateValue } from \"./state\";\nimport { CurrPrevAndParsedLeague } from \"./types/newleague\";\n\nconst Landing: React.FC = () => {\n  const [{ gwsData, selectedGw }, dispatch] = useStateValue();\n  const [displayUrl, setDisplayUrl] = useState<boolean>(false);\n  const [leagueId, setLeagueId] = useState<string>(\"\");\n  const [userSelectedGW, setUserSelectedGW] = useState<string>(selectedGw);\n\n  const fetchLeague = async (gw: number, leagueId: string) => {\n    if (!gw || !leagueId) return;\n    try {\n      const params: LeagueFetchType = { gw: gw.toString(), leagueId };\n      const leagueRequest = await getLeague(params);\n      if (leagueRequest.status == 200 && leagueRequest.data) {\n        const league: CurrPrevAndParsedLeague = leagueRequest.data;\n        dispatch({ type: \"SET_LEAGUE_DATA\", payload: league });\n        dispatch({ type: \"SET_SELECTED_GW\", payload: userSelectedGW });\n        window.localStorage.setItem(\"usersPreviousLeagueID\", leagueId);\n      }\n    } catch {\n      alert(\"No league found\");\n    }\n  };\n  useEffect(() => {\n    const usersPreviousId = window.localStorage.getItem(\n      \"usersPreviousLeagueID\"\n    );\n    if (usersPreviousId) setLeagueId(usersPreviousId);\n  }, []);\n  useEffect(() => setUserSelectedGW(selectedGw), [selectedGw]);\n\n  return (\n    <>\n      <Box sx={{ my: 4 }} style={{ display: \"flex\", marginTop: \"10%\" }}>\n        <img\n          src=\"logo512.png\"\n          alt=\"logo\"\n          style={{ margin: \"auto\", maxWidth: \"500px\", width: \"75%\" }}\n        />\n      </Box>\n      <Box\n        sx={{ my: 4 }}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <Box\n          style={{\n            width: 300,\n            height: 20,\n          }}\n        >\n          {displayUrl ? (\n            <img src=\"urlpic.png\" alt=\"urlpic\" style={{ maxWidth: 300 }} />\n          ) : null}\n        </Box>\n        <FormControl margin=\"normal\" variant=\"filled\" style={{ width: 300 }}>\n          <TextField\n            InputProps={{\n              endAdornment: (\n                <Box>\n                  <HelpIcon\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setDisplayUrl(!displayUrl)}\n                  />\n                </Box>\n              ),\n            }}\n            id=\"leagueId\"\n            value={leagueId}\n            label=\"League ID\"\n            onChange={(e) => setLeagueId(e.target.value)}\n          />\n        </FormControl>\n        <FormControl margin=\"normal\" variant=\"outlined\" style={{ width: 300 }}>\n          <InputLabel id=\"gw\">Gameweek</InputLabel>\n          <Select\n            labelId=\"gw\"\n            id=\"gw\"\n            label=\"Gameweek\"\n            value={userSelectedGW.toString()}\n            defaultValue=\"\"\n            onChange={(e) => setUserSelectedGW(e.target.value)}\n          >\n            {gwsData.map((gw) => {\n              return (\n                <MenuItem key={gw.id} value={gw.id}>\n                  {\" \"}\n                  {gw.id}{\" \"}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n        <Button\n          style={{ marginTop: 15 }}\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => fetchLeague(parseInt(userSelectedGW), leagueId)}\n        >\n          Go!\n        </Button>\n      </Box>\n    </>\n  );\n};\nexport default Landing;\n","import {\n  Card,\n  CardContent,\n  CardHeader,\n  Table,\n  TableBody,\n  TableContainer,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface CardWithTableProps {\n  header?: any | null;\n}\n\nconst CardWithTable: React.FC<CardWithTableProps> = ({\n  children,\n  header = null,\n}) => {\n  return (\n    <Card\n      variant=\"elevation\"\n      style={{ marginBottom: \"20px\", borderRadius: \"5px\" }}\n    >\n      <CardContent>\n        {header}\n        <TableContainer>\n          <Table>{children}</Table>\n        </TableContainer>\n      </CardContent>\n    </Card>\n  );\n};\nexport default CardWithTable;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst Captains: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData?.parsedData) return null;\n  return (\n    <CardWithTable\n      header={<CardHeader title={\"Captains\"} style={{ textAlign: \"center\" }} />}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Captain</TableCell>\n          <TableCell>Owners</TableCell>\n          <TableCell>#</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.captains.map((c) => {\n          return (\n            <TableRow key={c.captain}>\n              <TableCell>\n                {`${bssData.elements[c.captain].first_name} ${\n                  bssData.elements[c.captain].web_name\n                }`}\n              </TableCell>\n              <TableCell>{c.captainedBy.join(\", \")}</TableCell>\n              <TableCell>{c.captainedBy.length} </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Captains;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst Chips: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (\n    !bssData ||\n    !leagueData?.parsedData ||\n    leagueData.parsedData.chips.length < 1\n  )\n    return null;\n  const getChipName = (chip: string): string => {\n    switch (chip) {\n      case \"wildcard\":\n        return \"Wildcard\";\n      case \"3xc\":\n        return \"Triple Captain\";\n      case \"freehit\":\n        return \"Freehit\";\n      case \"bboost\":\n        return \"Bench Boost\";\n      default:\n        return \"\";\n    }\n  };\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Chips played\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Chip</TableCell>\n          <TableCell>Used by</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.chips.map((c) => {\n          return (\n            <TableRow key={c.chip}>\n              <TableCell>{getChipName(c.chip)}</TableCell>\n              <TableCell>{c.usedBy.join(\", \")}</TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Chips;\n","import CardWithTable from \"./CardWithTable\";\nimport {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { useStateValue } from \"../state\";\n\nconst DataPage: React.FC<{}> = () => {\n  const [{ leagueData }] = useStateValue();\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Team values\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableCell>Manager</TableCell>\n        <TableCell>Value</TableCell>\n      </TableHead>\n      <TableBody>\n        {leagueData?.parsedData.managers\n          .sort(\n            (a, b) =>\n              b.manager.gw_team.entry_history.value -\n              a.manager.gw_team.entry_history.value\n          )\n          .map((manager) => {\n            return (\n              <TableRow>\n                <TableCell>{manager.manager.player_name}</TableCell>\n                <TableCell>\n                  {(manager.manager.gw_team.entry_history.value / 10).toFixed(\n                    1\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\n\nexport default DataPage;\n","import { createTheme } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\n\n// A custom theme for this app\nexport const navBarBgColor = \"#13181F\";\nconst theme = createTheme({\n  palette: {\n    // type: \"dark\",\n    mode: \"dark\",\n    background: {\n      default: \"#171c24\",\n      paper: \"#222b36\",\n    },\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n});\n\nexport default theme;\n","import {\n  AppBar,\n  BottomNavigationAction,\n  Box,\n  Grid,\n  Tab,\n  Tabs,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport InsertChartIcon from \"@material-ui/icons/InsertChart\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\nimport { useStateValue } from \"../state\";\nimport { navBarBgColor } from \"../theme\";\n\nconst navStyles = { margin: \"auto\" };\nconst navLinks = [\n  {\n    icon: <HomeIcon style={navStyles} />,\n    text: \"Main\",\n  },\n  {\n    icon: <SwapHorizIcon style={navStyles} />,\n    text: \"Transfers\",\n  },\n  {\n    icon: <ListAltIcon style={navStyles} />,\n    text: \"Standings\",\n  },\n  {\n    icon: <InsertChartIcon style={navStyles} />,\n    text: \"Data\",\n  },\n];\n\ninterface NavBarProps {\n  setPage: any;\n  page: string;\n}\nconst NavBar: React.FC<NavBarProps> = ({ page, setPage }) => {\n  const [{ leagueData, selectedGw, gwsData }, dispatch] = useStateValue();\n  if (!leagueData?.league_curr.managers) return null;\n  const latestGw: boolean = gwsData[0].id.toString() == selectedGw;\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar style={{ background: navBarBgColor }}>\n          <img\n            onClick={() =>\n              dispatch({ type: \"RESET_LEAGUE_DATA\", payload: null })\n            }\n            src=\"logo192.png\"\n            alt=\"logo\"\n            style={{\n              maxHeight: \"75%\",\n              maxWidth: 80,\n              paddingBlock: 7,\n              cursor: \"pointer\",\n            }}\n          />\n          <Box display={{ xs: \"none\", md: \"flex\" }}>\n            <Tabs\n              style={{ marginLeft: 15 }}\n              value={page}\n              onChange={(_event, newValue) => {\n                setPage(newValue);\n              }}\n            >\n              {navLinks.map((navlink) => (\n                <Tab\n                  key={navlink.text}\n                  value={navlink.text.toLowerCase()}\n                  icon={navlink.icon}\n                  label={navlink.text}\n                  disabled={navlink.text == \"Standings\" && !latestGw}\n                />\n              ))}\n            </Tabs>\n          </Box>\n          <Typography style={{ marginLeft: \"auto\" }} variant=\"h5\">\n            {`${leagueData?.league_curr.league.name}${\n              leagueData?.league_curr.managers.length > 49 ? \" (Top 50)\" : \"\"\n            }, Gameweek ${selectedGw}`}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Box display={{ md: \"none\" }}>\n        <BottomNavigation\n          style={{\n            background: navBarBgColor,\n            position: \"fixed\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n          }}\n          value={page}\n          onChange={(event, newValue) => {\n            setPage(newValue);\n          }}\n          showLabels\n        >\n          {navLinks.map((navlink) => (\n            <BottomNavigationAction\n              key={navlink.text}\n              value={navlink.text.toLowerCase()}\n              label={navlink.text}\n              icon={navlink.icon}\n            />\n          ))}\n        </BottomNavigation>\n      </Box>\n      {/*\n      <Grid\n        container\n        maxWidth=\"lg\"\n        style={{\n          backgroundColor: theme.palette.background.default,\n          paddingRight: 60,\n          position: \"fixed\",\n          top: 0,\n          paddingBlock: 10,\n        }}\n      >\n        <Grid\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          item\n          xs={2}\n        >\n          <img\n            src=\"logo192.png\"\n            alt=\"logo\"\n            style={{ maxHeight: \"75%\", maxWidth: \"75%\" }}\n          />\n        </Grid>\n        <Grid\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          item\n          xs={10}\n          md={5}\n        >\n          <Typography style={{}} variant=\"h5\">\n            {`${league.league.name}, Gameweek ${selectedGW}`}\n          </Typography>\n        </Grid>\n        <Grid\n          item\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          display={{ xs: \"none\", md: \"flex\" }}\n          md={5}\n        >\n          <Tabs\n            value={page}\n            onChange={(_event, newValue) => {\n              setPage(newValue);\n            }}\n          >\n            {navLinks.map((navlink) => (\n              <Tab\n                key={navlink.text}\n                value={navlink.text.toLowerCase()}\n                icon={navlink.icon}\n                label={navlink.text}\n              />\n            ))}\n          </Tabs>\n        </Grid>\n      </Grid>\n      <Box display={{ md: \"none\" }}>\n        <BottomNavigation\n          style={{\n            position: \"fixed\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n          }}\n          value={page}\n          onChange={(event, newValue) => {\n            setPage(newValue);\n          }}\n          showLabels\n        >\n          {navLinks.map((navlink) => (\n            <BottomNavigationAction\n              key={navlink.text}\n              value={navlink.text.toLowerCase()}\n              label={navlink.text}\n              icon={navlink.icon}\n            />\n          ))}\n        </BottomNavigation>\n      </Box>\n      */}\n    </>\n  );\n};\nexport default NavBar;\n","import {\n  Button,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerName } from \"../tools\";\nimport { Player } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst Players: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData) return null;\n  const [filter, setFilter] = useState<string>(\"\");\n  const filterPlayers = (filter: string, players: Player[]) => {\n    if (filter == \"\") return players;\n    return players.filter((plr) =>\n      getPlayerName(bssData.elements[plr.player]).toLowerCase().includes(filter)\n    );\n  };\n  return (\n    <CardWithTable\n      header={\n        <>\n          <TextField\n            fullWidth\n            value={filter || \"\"}\n            InputProps={{\n              endAdornment: (\n                <Button variant=\"text\" onClick={() => setFilter(\"\")}>\n                  Clear\n                </Button>\n              ),\n            }}\n            label={`Search from ${leagueData.parsedData.players.length} players...`}\n            onChange={(e) => setFilter(e.target.value.toLowerCase())}\n          />\n        </>\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Player</TableCell>\n          <TableCell>Owners</TableCell>\n          <TableCell>#</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {filterPlayers(filter, leagueData.parsedData.players).map((plr) => (\n          <TableRow key={plr.player}>\n            <TableCell>{`${bssData.elements[plr.player].first_name} ${\n              bssData.elements[plr.player].web_name\n            }`}</TableCell>\n            <TableCell>{plr.ownedBy.join(\", \")}</TableCell>\n            <TableCell>{plr.ownedBy.length}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Players;\n","import {\n  Button,\n  CardHeader,\n  Grid,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getElementsTeam, getPlayerName, getPlayerPosition } from \"../tools\";\nimport { Manager } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\n\nexport interface ManagerPageType {\n  manager: Manager;\n  points: number;\n}\n\ninterface ManagerPageProps {\n  manager: ManagerPageType;\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\n\nconst ManagerPage: React.FC<ManagerPageProps> = ({\n  manager,\n  setManagerPage,\n}) => {\n  const [{ bssData }] = useStateValue();\n  if (!bssData?.elements) return null;\n  return (\n    <CardWithTable\n      header={\n        <Grid container>\n          <Grid\n            item\n            xs={3}\n            display=\"flex\"\n            justifyContent=\"left\"\n            alignItems=\"center\"\n          >\n            <Button onClick={() => setManagerPage(null)} variant=\"contained\">\n              Back\n            </Button>\n          </Grid>\n          <Grid item xs={6}>\n            <CardHeader\n              title={manager.manager.player_name}\n              style={{ textAlign: \"center\" }}\n            />\n          </Grid>\n          <Grid item xs={3}></Grid>\n        </Grid>\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Player</TableCell>\n          <TableCell>Team</TableCell>\n          <TableCell>Position</TableCell>\n          <TableCell>Points</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {manager.manager.gw_team.picks\n          .filter((pick) => pick.multiplier > 0)\n          .map((pick) => {\n            return (\n              <TableRow key={pick.element}>\n                <TableCell>\n                  {getPlayerName(bssData.elements[pick.element])}\n                  {pick.is_captain ? \" (C)\" : \"\"}\n                  {pick.is_vice_captain ? \" (V)\" : \"\"}\n                </TableCell>\n                <TableCell>\n                  {getElementsTeam(\n                    bssData.elements[pick.element],\n                    bssData.teams\n                  )}\n                </TableCell>\n                <TableCell>\n                  {getPlayerPosition(bssData.elements[pick.element])}\n                </TableCell>\n                <TableCell>\n                  {bssData.elements[pick.element].event_points *\n                    pick.multiplier}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        <TableRow>\n          <TableCell>Total</TableCell>\n          <TableCell></TableCell>\n          <TableCell></TableCell>\n          <TableCell>{manager.points}</TableCell>\n        </TableRow>\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default ManagerPage;\n","import {\n  Box,\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { FC } from \"react\";\nimport CardWithTable from \"./CardWithTable\";\nimport ManagerPage, { ManagerPageType } from \"./ManagerPage\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport { useStateValue } from \"../state\";\nimport { Manager, ParsedManagerPick } from \"../types/newleague\";\n\ninterface StandingsRowType {\n  manager: Manager;\n  gwPoints: number;\n  totalPoints: number;\n  i?: number;\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\nconst StandingsRow: FC<StandingsRowType> = ({\n  gwPoints,\n  totalPoints,\n  manager,\n  setManagerPage,\n  i = 1,\n}) => {\n  const getRank = () => {\n    const arrow = manager.last_rank < i ? 0 : manager.last_rank > i ? 2 : 1;\n    const typoStyles: React.CSSProperties = {\n      marginRight: 5,\n      marginBlock: \"auto\",\n    };\n    const iconStyles: React.CSSProperties = {\n      marginBlock: \"auto\",\n    };\n    const getRankCell = (rank: number, icon: any) => (\n      <Box display=\"flex\">\n        <Typography style={typoStyles} variant=\"button\">\n          {rank}\n        </Typography>\n        {icon}\n      </Box>\n    );\n    if (arrow == 0)\n      return getRankCell(\n        i,\n        <KeyboardArrowUpIcon color=\"primary\" style={iconStyles} />\n      );\n    else if (arrow == 1)\n      return getRankCell(\n        i,\n        <FiberManualRecordIcon color=\"disabled\" style={iconStyles} />\n      );\n    else\n      return getRankCell(\n        i,\n        <KeyboardArrowDownIcon color=\"error\" style={iconStyles} />\n      );\n  };\n  return (\n    <TableRow\n      style={{ cursor: \"pointer\" }}\n      onClick={() =>\n        setManagerPage(manager ? { manager: manager, points: gwPoints } : null)\n      }\n      key={i}\n    >\n      <TableCell>{getRank()}</TableCell>\n      <TableCell>{manager.player_name}</TableCell>\n      <TableCell>{gwPoints}</TableCell>\n      <TableCell>{totalPoints}</TableCell>\n    </TableRow>\n  );\n};\ninterface StandingsRowsType {\n  managers: ParsedManagerPick[];\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\n\nconst StandingsRows: FC<StandingsRowsType> = ({ managers, setManagerPage }) => {\n  const [{ bssData }] = useStateValue();\n  if (!bssData) return null;\n  let standings: StandingsRowType[] = [];\n  for (const managerObject of managers) {\n    const { gw_team } = managerObject.manager;\n    const oldTotal: number =\n      gw_team.entry_history.total_points - gw_team.entry_history.points;\n    //   const gwPicks = []\n    let gwTotal: number = 0;\n    for (const pick of managerObject.parsedPicks.active) {\n      const element = bssData.elements[pick.element];\n      gwTotal += element.event_points * pick.multiplier;\n    }\n    standings.push({\n      manager: managerObject.manager,\n      gwPoints: gwTotal,\n      totalPoints: oldTotal + gwTotal,\n      setManagerPage: setManagerPage,\n    });\n  }\n  standings.sort((a, b) => b.totalPoints - a.totalPoints);\n  return (\n    <>\n      {standings.map((s, i) => (\n        <StandingsRow key={i} {...s} i={i + 1} />\n      ))}\n    </>\n  );\n};\n\nconst Standings: FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!leagueData?.parsedData || !bssData) return null;\n  const [managerPage, setManagerPage] = useState<ManagerPageType | null>(null);\n  if (managerPage)\n    return (\n      <ManagerPage setManagerPage={setManagerPage} manager={managerPage} />\n    );\n  return (\n    <>\n      <CardWithTable\n        header={\n          <CardHeader title={\"Standings\"} style={{ textAlign: \"center\" }} />\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Rank</TableCell>\n            <TableCell>Manager</TableCell>\n            <TableCell>GW</TableCell>\n            <TableCell>Tot</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <StandingsRows\n            setManagerPage={setManagerPage}\n            managers={leagueData.parsedData.managers}\n          />\n        </TableBody>\n      </CardWithTable>\n    </>\n  );\n};\n\nexport default Standings;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerName } from \"../tools\";\nimport CardWithTable from \"./CardWithTable\";\n\n// interface TransfersProps {}\n\nconst Transfers: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData?.parsedData?.transfers) return null;\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Transfers\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Manager</TableCell>\n          <TableCell>In</TableCell>\n          <TableCell>Out</TableCell>\n          <TableCell>Cost? </TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.transfers.map((manager) => (\n          <TableRow key={manager.managerName}>\n            <TableCell>{manager.managerName}</TableCell>\n            <TableCell>\n              {manager.chip ??\n                manager.transfersIn\n                  .map((t) => getPlayerName(bssData.elements[t]))\n                  .join(\", \")}\n            </TableCell>\n            <TableCell>\n              {manager.chip ??\n                manager.transfersOut\n                  .map((t) => getPlayerName(bssData.elements[t]))\n                  .join(\", \")}\n            </TableCell>\n            <TableCell>\n              {manager.transfersCost !== 0 ? manager.transfersCost * -1 : \"\"}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Transfers;\n","import { Box } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport Captains from \"./components/Captains\";\nimport Chips from \"./components/Chips\";\nimport DataPage from \"./components/DataPage\";\nimport NavBar from \"./components/NavBar\";\nimport Players from \"./components/Players\";\nimport Standings from \"./components/Standings\";\nimport Transfers from \"./components/Transfers\";\n\ntype PageType = \"main\" | \"transfers\" | \"standings\" | \"data\";\n\nconst League: React.FC = () => {\n  const [page, setPage] = useState<PageType>(\"main\");\n  const pageToShow = (page: PageType) => {\n    switch (page) {\n      case \"main\":\n        return (\n          <>\n            <Chips />\n            <Captains />\n            <Players />\n          </>\n        );\n      case \"transfers\":\n        return <Transfers />;\n      case \"standings\":\n        return <Standings />;\n      case \"data\":\n        return <DataPage />;\n      default:\n        return null;\n    }\n  };\n  return (\n    <>\n      <NavBar page={page} setPage={setPage} />\n      <Box paddingBottom={10} marginTop={20}>\n        {pageToShow(page)}\n      </Box>\n    </>\n  );\n};\nexport default League;\n","import { Box } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport { useEffect } from \"react\";\nimport Landing from \"./Landing\";\nimport League from \"./League\";\nimport { getBssData } from \"./service\";\nimport { useStateValue } from \"./state\";\nimport { DataType } from \"./types/data\";\n\nexport default function App() {\n  const [{ bssData, leagueData }, dispatch] = useStateValue();\n  useEffect(() => {\n    const fetchBssData = async () => {\n      const bssRequest = await getBssData();\n      if (bssRequest.status == 200 && bssRequest.data) {\n        const data: DataType = bssRequest.data;\n        dispatch({ type: \"SET_BSS_DATA\", payload: data });\n      } else alert(\"The game is being updated.\");\n    };\n    fetchBssData();\n  }, []);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Box height=\"100vh\">{leagueData ? <League /> : <Landing />}</Box>\n    </Container>\n  );\n}\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport ReactDOM from \"react-dom\";\nimport { StateProvider, reducer } from \"./state\";\nimport App from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <StateProvider reducer={reducer}>\n      <App />\n    </StateProvider>\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n);\n","import { State } from \"./state\";\nimport { DataType } from \"../types/data\";\nimport { CurrPrevAndParsedLeague } from \"../types/newleague\";\nimport { getGWs } from \"../tools\";\n\nexport type Action =\n  | {\n      type: \"SET_BSS_DATA\";\n      payload: DataType;\n    }\n  | {\n      type: \"SET_LEAGUE_DATA\";\n      payload: CurrPrevAndParsedLeague;\n    }\n  | {\n      type: \"RESET_LEAGUE_DATA\";\n      payload: any;\n    }\n  | {\n      type: \"SET_SELECTED_GW\";\n      payload: string;\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_BSS_DATA\":\n      const gws = getGWs(action.payload.events);\n      return {\n        ...state,\n        bssData: {\n          ...action.payload,\n        },\n        gwsData: gws,\n        selectedGw: gws[0].id.toString(),\n      };\n    case \"SET_LEAGUE_DATA\":\n      return {\n        ...state,\n        leagueData: {\n          ...action.payload,\n        },\n      };\n    case \"RESET_LEAGUE_DATA\":\n      return {\n        ...state,\n        leagueData: null,\n      };\n    case \"SET_SELECTED_GW\":\n      return {\n        ...state,\n        selectedGw: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}