{"version":3,"sources":["tools.ts","state/state.tsx","service.ts","Landing.tsx","components/CardWithTable.tsx","components/Captains.tsx","components/Chips.tsx","components/DataPage.tsx","theme.ts","components/NavBar.tsx","components/Players.tsx","components/ChipsUsed.tsx","components/CompareGrid.tsx","components/CompareManager.tsx","components/ManagerPage.tsx","components/TeamBox.tsx","components/Standings.tsx","components/Transfers.tsx","League.tsx","App.tsx","index.tsx","state/reducer.ts"],"names":["getPlayerName","element","fullname","first_name","length","split","second_name","web_name","getPlayerWebName","getPlayerPosition","element_type","getElementType","a","getElementsTeam","teams","team","short_name","initialState","bssData","leagueData","gwsData","selectedGw","liveElements","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","baseUrl","getBssData","axios","get","getLeague","params","post","getLiveElements","getTeamForChips","id","Landing","useState","displayUrl","setDisplayUrl","leagueId","setLeagueId","userSelectedGW","setUserSelectedGW","loading","setLoading","fetchLeague","gw","toString","liveRequest","status","data","type","payload","console","log","leagueRequest","league","window","localStorage","setItem","alert","useEffect","usersPreviousId","getItem","idFromBrowser","location","pathname","match","parseInt","join","sx","my","style","display","marginTop","src","alt","margin","maxWidth","width","flexDirection","alignItems","height","FormControl","variant","TextField","InputProps","endAdornment","cursor","onClick","onKeyPress","e","key","label","onChange","target","InputLabel","Select","labelId","defaultValue","map","MenuItem","Button","disabled","size","CardWithTable","header","Card","marginBottom","borderRadius","CardContent","TableContainer","Table","Captains","parsedData","CardHeader","title","textAlign","TableHead","TableRow","TableCell","TableBody","captains","c","elements","captain","captainedBy","getChipName","chip","Chips","chips","usedBy","DataPage","managers","sort","b","manager","gw_team","entry_history","player_name","toFixed","navBarBgColor","theme","createTheme","palette","mode","background","default","paper","primary","main","secondary","error","red","A400","navStyles","navLinks","icon","text","NavBar","page","setPage","league_curr","latestGw","history","useHistory","AppBar","position","Toolbar","push","maxHeight","paddingBlock","Box","xs","md","Tabs","marginLeft","_event","newValue","navlink","Tab","toLowerCase","Typography","name","BottomNavigation","zIndex","bottom","left","right","showLabels","BottomNavigationAction","Players","filter","setFilter","fullWidth","players","plr","player","includes","filterPlayers","ownedBy","ChipsUsed","managerChips","setManagerChips","getteamdata","entry","chipsReq","active_chip","event","CompareGrid","headerText","team1","team2","Grid","sm","item","direction","picks","pick","ep","CompareManager","enemy","setEnemy","i","newEnemy","mngrObj","container","justifyContent","ManagerPage","setManagerPage","Link","href","rel","multiplier","is_captain","is_vice_captain","stats","total_points","event_transfers_cost","points","TeamBox","entry_name","StandingsRow","gwPoints","totalPoints","arrow","last_rank","typoStyles","marginRight","marginBlock","iconStyles","getRankCell","rank","color","getRank","StandingsRows","standings","setStandings","standingsTemp","managerObject","oldTotal","prev_points","gwTotal","parsedPicks","active","s","Standings","managerPage","handleRefresh","liveElementsRequest","alignContent","IconButton","fontSize","Transfers","transfers","managerName","transfersIn","t","transfersOut","transfersCost","League","paddingBottom","pageToShow","App","fetchBssData","bssRequest","Container","ReactDOM","render","ThemeProvider","CssBaseline","action","gws","events","finished","dd_diff","Date","deadline_time","reverse","getGWs","document","querySelector"],"mappings":"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","file":"static/js/main.6ffaa573.chunk.js","sourcesContent":["import { DataType } from \"./types/data\";\n\nexport const getPlayerName = (\n  element: DataType[\"elements\"][0] | null\n): string => {\n  if (!element) return \"\";\n  const first_name =\n    element.first_name.length < 10\n      ? element.first_name\n      : element.first_name.split(\" \")[0];\n  const fullname = first_name + \" \" + element.second_name;\n\n  return fullname.length < 20 ? fullname : element.web_name;\n};\n\nexport const getPlayerWebName = (\n  element: DataType[\"elements\"][0] | null\n): string => {\n  if (!element) return \"\";\n  return element.web_name;\n};\n\nexport const getPlayerPosition = (element: DataType[\"elements\"][0]) => {\n  switch (element.element_type) {\n    case 1:\n      return \"GKP\";\n    case 2:\n      return \"DEF\";\n    case 3:\n      return \"MID\";\n    case 4:\n      return \"FWD\";\n    default:\n      return \"\";\n  }\n};\n\nexport const getElementType = (a: DataType[\"elements\"][0] | undefined) => {\n  if (a) return a.element_type;\n  else return 0;\n};\n\nexport const getElementsTeam = (\n  element: DataType[\"elements\"][0],\n  teams: DataType[\"teams\"]\n) => {\n  const team = teams[element.team - 1].short_name || \"no\";\n  return team;\n};\n\nexport const getGWs = (events: DataType[\"events\"]): DataType[\"events\"] => {\n  let gws = events.filter((e) => e.finished);\n  const delay = 20 * 60 * 1000;\n  for (let e of events) {\n    // @ts-ignore\n    const dd_diff = new Date() - new Date(e.deadline_time);\n    if (!e.finished && dd_diff > delay) {\n      gws.push(e);\n    }\n  }\n  return gws.reverse();\n};\n","import React, { createContext, useContext, useReducer } from \"react\";\nimport { DataType } from \"../types/data\";\nimport { LiveElement } from \"../types/liveElements\";\nimport { CurrPrevAndParsedLeague } from \"../types/newleague\";\nimport { Action } from \"./reducer\";\n\nexport type State = {\n  bssData: DataType | null;\n  leagueData: CurrPrevAndParsedLeague | null;\n  gwsData: DataType[\"events\"];\n  selectedGw: string;\n  liveElements: LiveElement[];\n};\n\nconst initialState: State = {\n  bssData: null,\n  leagueData: null,\n  gwsData: [],\n  selectedGw: \"\",\n  liveElements: [],\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","const baseUrl =\n  process.env.NODE_ENV == \"development\" ? \"http://localhost:3636/api\" : \"/api\";\nimport axios from \"axios\";\nimport { LeagueFetchType, LiveFetchType } from \"./types/fetchTypes\";\n\nexport const getBssData = async () => {\n  return await axios.get(`${baseUrl}/data`);\n};\n\nexport const getLeague = async (params: LeagueFetchType) => {\n  return await axios.post(`${baseUrl}/league`, params);\n};\n\nexport const getLiveElements = async (params: LiveFetchType) => {\n  return await axios.post(`${baseUrl}/live`, params);\n};\n\nexport const getTeamForChips = async (id: any) => {\n  return await axios.post(`${baseUrl}/team`, id);\n};\n","import {\n  Button,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport { Box } from \"@material-ui/system\";\nimport React, { useEffect, useState } from \"react\";\nimport { getLeague, getLiveElements } from \"./service\";\nimport { useStateValue } from \"./state\";\nimport { LeagueFetchType, LiveFetchType } from \"./types/fetchTypes\";\nimport { LiveElement } from \"./types/liveElements\";\nimport { CurrPrevAndParsedLeague } from \"./types/newleague\";\n\nconst Landing: React.FC = () => {\n  const [{ gwsData, selectedGw }, dispatch] = useStateValue();\n  const [displayUrl, setDisplayUrl] = useState<boolean>(false);\n  const [leagueId, setLeagueId] = useState<string>(\"\");\n  const [userSelectedGW, setUserSelectedGW] = useState<string>(selectedGw);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const fetchLeague = async (gw: number, leagueId: string) => {\n    if (!gw || !leagueId) return;\n    try {\n      const params: LiveFetchType = { gw: gw.toString() };\n      const liveRequest = await getLiveElements(params);\n      if (liveRequest.status == 200 && liveRequest.data) {\n        const liveElements: LiveElement[] = liveRequest.data;\n        dispatch({ type: \"SET_LIVE_ELEMENTS\", payload: liveElements });\n      }\n    } catch (error) {\n      console.log(\"error:\", error);\n    }\n    try {\n      setLoading(true);\n      const params: LeagueFetchType = { gw: gw.toString(), leagueId };\n      const leagueRequest = await getLeague(params);\n      if (leagueRequest.status == 200 && leagueRequest.data) {\n        const league: CurrPrevAndParsedLeague = leagueRequest.data;\n        if (userSelectedGW)\n          dispatch({ type: \"SET_SELECTED_GW\", payload: userSelectedGW });\n        window.localStorage.setItem(\"usersPreviousLeagueID\", leagueId);\n        setLoading(false);\n        dispatch({ type: \"SET_LEAGUE_DATA\", payload: league });\n      }\n    } catch {\n      alert(\"No league found or FPL is being updated\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const usersPreviousId = window.localStorage.getItem(\n      \"usersPreviousLeagueID\"\n    );\n    if (usersPreviousId) setLeagueId(usersPreviousId);\n  }, []);\n\n  useEffect(() => {\n    setUserSelectedGW(selectedGw);\n    const idFromBrowser = window.location.pathname.match(/[0-9]/g);\n    if (idFromBrowser) {\n      fetchLeague(parseInt(selectedGw), idFromBrowser.join(\"\").toString());\n    }\n  }, [selectedGw]);\n\n  return (\n    <>\n      <Box sx={{ my: 4 }} style={{ display: \"flex\", marginTop: \"10%\" }}>\n        <img\n          src=\"/images/logo512.png\"\n          alt=\"logo\"\n          style={{ margin: \"auto\", maxWidth: \"500px\", width: \"75%\" }}\n        />\n      </Box>\n      <Box\n        sx={{ my: 4 }}\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <Box\n          style={{\n            width: 300,\n            height: 20,\n          }}\n        >\n          {displayUrl ? (\n            <img\n              src=\"/images/urlpic.png\"\n              alt=\"urlpic\"\n              style={{ maxWidth: 300 }}\n            />\n          ) : null}\n        </Box>\n        <FormControl margin=\"normal\" variant=\"filled\" style={{ width: 300 }}>\n          <TextField\n            InputProps={{\n              endAdornment: (\n                <Box>\n                  <HelpIcon\n                    style={{ cursor: \"pointer\" }}\n                    onClick={() => setDisplayUrl(!displayUrl)}\n                  />\n                </Box>\n              ),\n            }}\n            id=\"leagueId\"\n            onKeyPress={(e) => {\n              if (e.key === \"Enter\")\n                fetchLeague(parseInt(userSelectedGW), leagueId);\n            }}\n            value={leagueId}\n            label=\"League ID\"\n            onChange={(e) => setLeagueId(e.target.value)}\n          />\n        </FormControl>\n        <FormControl margin=\"normal\" variant=\"outlined\" style={{ width: 300 }}>\n          <InputLabel id=\"gw\">Gameweek</InputLabel>\n          <Select\n            labelId=\"gw\"\n            id=\"gw\"\n            label=\"Gameweek\"\n            value={userSelectedGW.toString()}\n            defaultValue=\"\"\n            onChange={(e) => setUserSelectedGW(e.target.value)}\n          >\n            {gwsData.map((gw) => {\n              return (\n                <MenuItem key={gw.id} value={gw.id}>\n                  {\" \"}\n                  {gw.id}{\" \"}\n                </MenuItem>\n              );\n            })}\n          </Select>\n        </FormControl>\n        <Button\n          style={{ marginTop: 15 }}\n          disabled={loading}\n          size=\"large\"\n          variant=\"contained\"\n          onClick={() => fetchLeague(parseInt(userSelectedGW), leagueId)}\n        >\n          {loading ? \"Loading...\" : \"Go!\"}\n        </Button>\n      </Box>\n    </>\n  );\n};\nexport default Landing;\n","import { Card, CardContent, Table, TableContainer } from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface CardWithTableProps {\n  header?: any | null;\n}\n\nconst CardWithTable: React.FC<CardWithTableProps> = ({\n  children,\n  header = null,\n}) => {\n  return (\n    <Card\n      variant=\"elevation\"\n      style={{ marginBottom: \"20px\", borderRadius: \"5px\" }}\n    >\n      <CardContent>\n        {header}\n        <TableContainer>\n          <Table>{children}</Table>\n        </TableContainer>\n      </CardContent>\n    </Card>\n  );\n};\nexport default CardWithTable;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerWebName } from \"../tools\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst Captains: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData?.parsedData) return null;\n  return (\n    <CardWithTable\n      header={<CardHeader title={\"Captains\"} style={{ textAlign: \"center\" }} />}\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Captain</TableCell>\n          <TableCell>Owners</TableCell>\n          <TableCell>#</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.captains.map((c) => {\n          return (\n            <TableRow key={c.captain}>\n              <TableCell>\n                {getPlayerWebName(bssData.elements[c.captain])}\n              </TableCell>\n              <TableCell>{c.captainedBy.join(\", \")}</TableCell>\n              <TableCell>{c.captainedBy.length} </TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Captains;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport CardWithTable from \"./CardWithTable\";\n\nexport const getChipName = (chip: string): string => {\n  switch (chip) {\n    case \"wildcard\":\n      return \"Wildcard\";\n    case \"3xc\":\n      return \"Triple Captain\";\n    case \"freehit\":\n      return \"Freehit\";\n    case \"bboost\":\n      return \"Bench Boost\";\n    default:\n      return \"\";\n  }\n};\nconst Chips: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (\n    !bssData ||\n    !leagueData?.parsedData ||\n    leagueData.parsedData.chips.length < 1\n  )\n    return null;\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Chips played\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Chip</TableCell>\n          <TableCell>Used by</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.chips.map((c) => {\n          return (\n            <TableRow key={c.chip}>\n              <TableCell>{getChipName(c.chip)}</TableCell>\n              <TableCell>{c.usedBy.join(\", \")}</TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Chips;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { useStateValue } from \"../state\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst DataPage: React.FC<{}> = () => {\n  const [{ leagueData }] = useStateValue();\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Team values\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Manager</TableCell>\n          <TableCell>Value</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData?.parsedData.managers\n          .sort(\n            (a, b) =>\n              b.manager.gw_team.entry_history.value -\n              a.manager.gw_team.entry_history.value\n          )\n          .map((manager) => {\n            return (\n              <TableRow key={manager.manager.id}>\n                <TableCell>{manager.manager.player_name}</TableCell>\n                <TableCell>\n                  {(manager.manager.gw_team.entry_history.value / 10).toFixed(\n                    1\n                  )}\n                </TableCell>\n              </TableRow>\n            );\n          })}\n      </TableBody>\n    </CardWithTable>\n  );\n};\n\nexport default DataPage;\n","import { createTheme } from \"@material-ui/core/styles\";\nimport { red } from \"@material-ui/core/colors\";\n\n// A custom theme for this app\nexport const navBarBgColor = \"#13181F\";\nconst theme = createTheme({\n  palette: {\n    // type: \"dark\",\n    mode: \"dark\",\n    background: {\n      default: \"#171c24\",\n      paper: \"#222b36\",\n    },\n    primary: {\n      main: \"#556cd6\",\n    },\n    secondary: {\n      main: \"#19857b\",\n    },\n    error: {\n      main: red.A400,\n    },\n  },\n});\n\nexport default theme;\n","import {\n  AppBar,\n  BottomNavigationAction,\n  Box,\n  Tab,\n  Tabs,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport InsertChartIcon from \"@material-ui/icons/InsertChart\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport SwapHorizIcon from \"@material-ui/icons/SwapHoriz\";\nimport { useHistory } from \"react-router-dom\";\nimport { useStateValue } from \"../state\";\nimport { navBarBgColor } from \"../theme\";\n\nconst navStyles = { margin: \"auto\" };\nconst navLinks = [\n  {\n    icon: <HomeIcon style={navStyles} />,\n    text: \"Main\",\n  },\n  {\n    icon: <SwapHorizIcon style={navStyles} />,\n    text: \"Transfers\",\n  },\n  {\n    icon: <ListAltIcon style={navStyles} />,\n    text: \"Standings\",\n  },\n  {\n    icon: <InsertChartIcon style={navStyles} />,\n    text: \"Values\",\n  },\n];\n\ninterface NavBarProps {\n  setPage: any;\n  page: string;\n}\n\nconst NavBar: React.FC<NavBarProps> = ({ page, setPage }) => {\n  const [{ leagueData, selectedGw, gwsData }, dispatch] = useStateValue();\n  if (!leagueData?.league_curr.managers) return null;\n  const latestGw: boolean = gwsData[0].id.toString() == selectedGw;\n  const history = useHistory();\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar style={{ background: navBarBgColor }}>\n          <img\n            onClick={() => {\n              dispatch({ type: \"RESET_LEAGUE_DATA\", payload: null });\n              history.push(\"/\");\n            }}\n            src=\"/images/logo192.png\"\n            alt=\"logo\"\n            style={{\n              maxHeight: \"75%\",\n              maxWidth: 80,\n              paddingBlock: 7,\n              cursor: \"pointer\",\n            }}\n          />\n          <Box display={{ xs: \"none\", md: \"flex\" }}>\n            <Tabs\n              style={{ marginLeft: 15 }}\n              value={page}\n              onChange={(_event, newValue) => {\n                setPage(newValue);\n              }}\n            >\n              {navLinks.map((navlink) => (\n                <Tab\n                  key={navlink.text}\n                  value={navlink.text.toLowerCase()}\n                  icon={navlink.icon}\n                  label={navlink.text}\n                  disabled={navlink.text == \"Standings\" && !latestGw}\n                />\n              ))}\n            </Tabs>\n          </Box>\n          <Typography style={{ marginLeft: \"auto\" }} variant=\"h5\">\n            {`${leagueData?.league_curr.league.name}${\n              leagueData?.league_curr.managers.length > 49 ? \" (Top 50)\" : \"\"\n            }, Gameweek ${selectedGw}`}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Box display={{ md: \"none\" }}>\n        <BottomNavigation\n          style={{\n            zIndex: 999999999,\n            background: navBarBgColor,\n            position: \"fixed\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n          }}\n          value={page}\n          onChange={(_event, newValue) => {\n            setPage(newValue);\n          }}\n          showLabels\n        >\n          {navLinks.map((navlink) => (\n            <BottomNavigationAction\n              key={navlink.text}\n              value={navlink.text.toLowerCase()}\n              label={navlink.text}\n              icon={navlink.icon}\n            />\n          ))}\n        </BottomNavigation>\n      </Box>\n    </>\n  );\n};\nexport default NavBar;\n","import {\n  Button,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n} from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerName, getPlayerWebName } from \"../tools\";\nimport { Player } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\n\nconst Players: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData) return null;\n  const [filter, setFilter] = useState<string>(\"\");\n  const filterPlayers = (filter: string, players: Player[]) => {\n    if (filter == \"\") return players;\n    return players.filter((plr) =>\n      getPlayerName(bssData.elements[plr.player]).toLowerCase().includes(filter)\n    );\n  };\n  return (\n    <CardWithTable\n      header={\n        <>\n          <TextField\n            fullWidth\n            value={filter || \"\"}\n            InputProps={{\n              endAdornment: (\n                <Button variant=\"text\" onClick={() => setFilter(\"\")}>\n                  Clear\n                </Button>\n              ),\n            }}\n            label={`Search from ${leagueData.parsedData.players.length} players...`}\n            onChange={(e) => setFilter(e.target.value.toLowerCase())}\n          />\n        </>\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Player</TableCell>\n          <TableCell>Owners</TableCell>\n          <TableCell>#</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {filterPlayers(filter, leagueData.parsedData.players).map((plr) => (\n          <TableRow key={plr.player}>\n            <TableCell>\n              {getPlayerWebName(bssData.elements[plr.player])}\n            </TableCell>\n            <TableCell>{plr.ownedBy.join(\", \")}</TableCell>\n            <TableCell>{plr.ownedBy.length}</TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Players;\n","import {\n  CardHeader,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@material-ui/core\";\nimport { Box } from \"@material-ui/system\";\nimport { FC, useEffect, useState } from \"react\";\nimport { getTeamForChips } from \"../service\";\nimport { Manager, GwTeam } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\nimport { getChipName } from \"./Chips\";\n\ninterface ChipsUsedType {\n  manager: Manager;\n}\n\nconst ChipsUsed: FC<ChipsUsedType> = ({ manager }) => {\n  const [managerChips, setManagerChips] = useState<GwTeam[]>();\n  useEffect(() => {\n    const getteamdata = async () => {\n      const id = manager.entry.toString();\n      const chipsReq = await getTeamForChips({ id });\n      if (chipsReq.status == 200 && chipsReq.data) {\n        const data: GwTeam[] = chipsReq.data;\n        setManagerChips(data.filter((gw) => gw.active_chip));\n      }\n    };\n    getteamdata();\n  }, []);\n\n  if (!managerChips) {\n    return null;\n  }\n\n  return (\n    <Box>\n      <CardWithTable\n        header={\n          <CardHeader\n            title={\"Chips used\"}\n            style={{ textAlign: \"center\" }}\n          ></CardHeader>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>GW</TableCell>\n            <TableCell>Chip</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {managerChips\n            ?.filter((gw) => gw.active_chip)\n            .map((gw) => {\n              return (\n                <TableRow key={gw.entry_history.event}>\n                  <TableCell>{gw.entry_history.event}</TableCell>\n                  <TableCell>{getChipName(gw.active_chip || \"\")}</TableCell>\n                </TableRow>\n              );\n            })}\n        </TableBody>\n      </CardWithTable>\n    </Box>\n  );\n};\nexport default ChipsUsed;\n","import { FC } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Manager } from \"../types/newleague\";\nimport { getElementType, getPlayerName } from \"../tools\";\nimport { useStateValue } from \"../state\";\n\ninterface CompareGridType {\n  headerText: string;\n  team1: Manager;\n  team2: Manager;\n}\n\nconst CompareGrid: FC<CompareGridType> = ({ headerText, team1, team2 }) => {\n  const [{ bssData }] = useStateValue();\n  return (\n    <Grid xs={12} sm={6} md={4} item direction=\"column\">\n      <Typography variant=\"h6\">{headerText}</Typography>\n      {team1.gw_team.picks\n        .filter(\n          (pick) =>\n            !team2.gw_team.picks.map((ep) => ep.element).includes(pick.element)\n        )\n        .sort(\n          (a, b) =>\n            getElementType(bssData?.elements[a.element]) -\n            getElementType(bssData?.elements[b.element])\n        )\n        .map((pick) => (\n          <Typography key={pick.element} variant=\"body2\">\n            {getPlayerName(bssData?.elements[pick.element] || null)}\n          </Typography>\n        ))}\n    </Grid>\n  );\n};\n\nexport default CompareGrid;\n","import {\n  CardHeader,\n  TableHead,\n  TableRow,\n  Table,\n  TableContainer,\n  TableCell,\n  TableBody,\n  Card,\n  CardContent,\n  Select,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  SelectChangeEvent,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport { Box } from \"@material-ui/system\";\nimport { FC, useState } from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getElementType, getPlayerName, getPlayerWebName } from \"../tools\";\nimport { Manager, ParsedManagerPick } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\nimport CompareGrid from \"./CompareGrid\";\nimport TeamBox from \"./TeamBox\";\n\ninterface CompareManagerType {\n  manager: Manager;\n}\n\nconst CompareManager: FC<CompareManagerType> = ({ manager }) => {\n  const [enemy, setEnemy] = useState<Manager | null>(null);\n  const [{ leagueData, bssData }] = useStateValue();\n  // leagueData?.parsedData.managers.map(m => m.manager.gw_team.picks)\n  const handleChange = (event: SelectChangeEvent) => {\n    console.log(\"event \", event.target.value);\n    const i: number = parseInt(event.target.value) || 0;\n    const newEnemy: Manager | null =\n      leagueData?.parsedData.managers[i].manager || null;\n    setEnemy(newEnemy);\n  };\n  return (\n    <Box>\n      <Card\n        variant=\"elevation\"\n        style={{ marginBottom: \"20px\", borderRadius: \"5px\" }}\n      >\n        <CardContent>\n          <CardHeader\n            title={\"Compare to\"}\n            style={{ textAlign: \"center\" }}\n          ></CardHeader>\n          <FormControl fullWidth>\n            <InputLabel id=\"compare-id\">Select another manager</InputLabel>\n            <Select\n              variant=\"standard\"\n              labelId=\"compare-id\"\n              id=\"compare-select\"\n              // value={enemy}\n              label=\"Compare to\"\n              onChange={handleChange}\n            >\n              {leagueData?.parsedData?.managers.map((mngrObj, i) => (\n                <MenuItem value={i}>{mngrObj.manager.player_name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          {manager && enemy ? (\n            <Grid container marginTop={5}>\n              <Grid item container display=\"flex\" justifyContent=\"left\">\n                <CompareGrid\n                  headerText={manager.player_name}\n                  team1={manager}\n                  team2={enemy}\n                />\n                <CompareGrid\n                  headerText={enemy.player_name}\n                  team1={enemy}\n                  team2={manager}\n                />\n                <Grid xs={12} sm={6} md={4} item direction=\"column\">\n                  <Typography variant=\"h6\">Common</Typography>\n                  {enemy.gw_team.picks\n                    .filter((pick) =>\n                      manager.gw_team.picks\n                        .map((ep) => ep.element)\n                        .includes(pick.element)\n                    )\n                    .sort(\n                      (a, b) =>\n                        getElementType(bssData?.elements[a.element]) -\n                        getElementType(bssData?.elements[b.element])\n                    )\n                    .map((pick) => (\n                      <Typography key={pick.element} variant=\"body2\">\n                        {getPlayerName(bssData?.elements[pick.element] || null)}\n                      </Typography>\n                    ))}\n                </Grid>\n              </Grid>\n            </Grid>\n          ) : null}\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\nexport default CompareManager;\n","import {\n  Button,\n  CardHeader,\n  Grid,\n  Link,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getElementsTeam, getPlayerName, getPlayerPosition } from \"../tools\";\nimport { Manager } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\nimport ChipsUsed from \"./ChipsUsed\";\nimport CompareManager from \"./CompareManager\";\n\nexport interface ManagerPageType {\n  manager: Manager;\n  points: number;\n}\n\ninterface ManagerPageProps {\n  manager: ManagerPageType;\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\n\nconst ManagerPage: React.FC<ManagerPageProps> = ({\n  manager,\n  setManagerPage,\n}) => {\n  const [{ bssData, liveElements, selectedGw }] = useStateValue();\n  if (!bssData?.elements) return null;\n  return (\n    <>\n      <CardWithTable\n        header={\n          <Grid container>\n            <Grid\n              item\n              xs={3}\n              display=\"flex\"\n              justifyContent=\"left\"\n              alignItems=\"center\"\n            >\n              <Button onClick={() => setManagerPage(null)} variant=\"contained\">\n                Back\n              </Button>\n            </Grid>\n            <Grid item xs={6}>\n              <CardHeader\n                title={manager.manager.player_name}\n                style={{ textAlign: \"center\" }}\n              />\n            </Grid>\n            <Grid\n              item\n              xs={3}\n              display=\"flex\"\n              direction=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Link\n                href={`https://fantasy.premierleague.com/entry/${manager.manager.entry}/event/${selectedGw}/`}\n                target=\"_blank\"\n                rel=\"noreferrer\"\n              >\n                <Button variant=\"contained\">FPL</Button>\n              </Link>\n            </Grid>\n          </Grid>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Player</TableCell>\n            <TableCell>Team</TableCell>\n            <TableCell>Position</TableCell>\n            <TableCell>Points</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {manager.manager.gw_team.picks\n            .filter((pick) => pick.multiplier > 0)\n            .map((pick) => {\n              return (\n                <TableRow key={pick.element}>\n                  <TableCell>\n                    {getPlayerName(bssData.elements[pick.element])}\n                    {pick.is_captain ? \" (C)\" : \"\"}\n                    {pick.is_vice_captain ? \" (V)\" : \"\"}\n                  </TableCell>\n                  <TableCell>\n                    {getElementsTeam(\n                      bssData.elements[pick.element],\n                      bssData.teams\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {getPlayerPosition(bssData.elements[pick.element])}\n                  </TableCell>\n                  <TableCell>\n                    {liveElements[pick.element].stats.total_points *\n                      pick.multiplier}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          {manager.manager.gw_team.entry_history.event_transfers_cost ==\n          0 ? null : (\n            <TableRow>\n              <TableCell>Transfers cost</TableCell>\n              <TableCell></TableCell>\n              <TableCell></TableCell>\n              <TableCell>\n                {manager.manager.gw_team.entry_history.event_transfers_cost *\n                  -1}\n              </TableCell>\n            </TableRow>\n          )}\n          <TableRow>\n            <TableCell>Total</TableCell>\n            <TableCell></TableCell>\n            <TableCell></TableCell>\n            <TableCell>{manager.points}</TableCell>\n          </TableRow>\n        </TableBody>\n      </CardWithTable>\n      <CardWithTable\n        header={\n          <CardHeader\n            title={\"Bench\"}\n            style={{ textAlign: \"center\" }}\n          ></CardHeader>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Player</TableCell>\n            <TableCell>Team</TableCell>\n            <TableCell>Position</TableCell>\n            <TableCell>Points</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {manager.manager.gw_team.picks\n            .filter((pick) => pick.multiplier == 0)\n            .map((pick) => {\n              return (\n                <TableRow key={pick.element}>\n                  <TableCell>\n                    {getPlayerName(bssData.elements[pick.element])}\n                  </TableCell>\n                  <TableCell>\n                    {getElementsTeam(\n                      bssData.elements[pick.element],\n                      bssData.teams\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    {getPlayerPosition(bssData.elements[pick.element])}\n                  </TableCell>\n                  <TableCell>\n                    {liveElements[pick.element].stats.total_points}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n        </TableBody>\n      </CardWithTable>\n      <ChipsUsed manager={manager.manager} />\n      <CompareManager manager={manager.manager} />\n    </>\n  );\n};\nexport default ManagerPage;\n","import { Link } from \"@material-ui/core\";\nimport { Box } from \"@material-ui/system\";\nimport React, { FC } from \"react\";\nimport { Manager } from \"../types/newleague\";\n\ninterface TeamBoxType {\n  manager: Manager;\n}\nconst TeamBox: FC<TeamBoxType> = ({ manager }) => {\n  return (\n    <Box>\n      <Link\n      // href={`https://fantasy.premierleague.com/entry/${manager.entry}/event/12/`}\n      >\n        <Box>{manager.entry_name}</Box>\n      </Link>\n      <Box>{manager.player_name}</Box>\n    </Box>\n  );\n};\nexport default TeamBox;\n","import {\n  Box,\n  CardHeader,\n  Grid,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport { FC, useEffect, useState } from \"react\";\nimport { getLiveElements } from \"../service\";\nimport { useStateValue } from \"../state\";\nimport { LiveFetchType } from \"../types/fetchTypes\";\nimport { LiveElement } from \"../types/liveElements\";\nimport { Manager, ParsedManagerPick } from \"../types/newleague\";\nimport CardWithTable from \"./CardWithTable\";\nimport ManagerPage, { ManagerPageType } from \"./ManagerPage\";\nimport TeamBox from \"./TeamBox\";\n\ninterface StandingsRowType {\n  manager: Manager;\n  gwPoints: number;\n  totalPoints: number;\n  i?: number;\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\nconst StandingsRow: FC<StandingsRowType> = ({\n  gwPoints,\n  totalPoints,\n  manager,\n  setManagerPage,\n  i = 1,\n}) => {\n  const getRank = () => {\n    const arrow = manager.last_rank > i ? 0 : manager.last_rank < i ? 2 : 1;\n    const typoStyles: React.CSSProperties = {\n      marginRight: 5,\n      marginBlock: \"auto\",\n    };\n    const iconStyles: React.CSSProperties = {\n      marginBlock: \"auto\",\n    };\n    const getRankCell = (rank: number, icon: any) => (\n      <Box display=\"flex\">\n        <Typography style={typoStyles} variant=\"button\">\n          {rank}\n        </Typography>\n        {icon}\n      </Box>\n    );\n    if (arrow == 0)\n      return getRankCell(\n        i,\n        <KeyboardArrowUpIcon color=\"primary\" style={iconStyles} />\n      );\n    else if (arrow == 1)\n      return getRankCell(\n        i,\n        <FiberManualRecordIcon color=\"disabled\" style={iconStyles} />\n      );\n    else\n      return getRankCell(\n        i,\n        <KeyboardArrowDownIcon color=\"error\" style={iconStyles} />\n      );\n  };\n  return (\n    <TableRow\n      style={{ cursor: \"pointer\" }}\n      onClick={() =>\n        setManagerPage(manager ? { manager: manager, points: gwPoints } : null)\n      }\n      key={i}\n    >\n      <TableCell>{getRank()}</TableCell>\n      <TableCell>\n        <TeamBox manager={manager} />\n      </TableCell>\n      <TableCell>{gwPoints}</TableCell>\n      <TableCell>{totalPoints}</TableCell>\n    </TableRow>\n  );\n};\n\ninterface StandingsRowsType {\n  managers: ParsedManagerPick[];\n  setManagerPage: React.Dispatch<React.SetStateAction<ManagerPageType | null>>;\n}\n\nconst StandingsRows: FC<StandingsRowsType> = ({ managers, setManagerPage }) => {\n  const [{ liveElements }] = useStateValue();\n  const [standings, setStandings] = useState<StandingsRowType[]>([]);\n  if (!liveElements) return null;\n  useEffect(() => {\n    const standingsTemp: StandingsRowType[] = [];\n    for (const managerObject of managers) {\n      const { gw_team } = managerObject.manager;\n      const oldTotal: number = managerObject.manager.prev_points;\n      let gwTotal: number = gw_team.entry_history.event_transfers_cost * -1;\n      for (const pick of managerObject.parsedPicks.active) {\n        const i = pick.element;\n        const livePoints = liveElements[i].stats.total_points;\n        gwTotal += livePoints * pick.multiplier;\n      }\n      standingsTemp.push({\n        manager: managerObject.manager,\n        gwPoints: gwTotal,\n        totalPoints: oldTotal + gwTotal,\n        setManagerPage: setManagerPage,\n      });\n    }\n    standingsTemp.sort((a, b) => b.totalPoints - a.totalPoints);\n    setStandings(standingsTemp);\n  }, [liveElements]);\n  return (\n    <>\n      {standings.map((s, i) => (\n        <StandingsRow key={i} {...s} i={i + 1} />\n      ))}\n    </>\n  );\n};\n\nconst Standings: FC = () => {\n  const [{ leagueData, selectedGw }, dispatch] = useStateValue();\n  if (!leagueData?.parsedData) return null;\n  const [managerPage, setManagerPage] = useState<ManagerPageType | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const handleRefresh = async () => {\n    setLoading(true);\n    const params: LiveFetchType = { gw: selectedGw };\n    const liveElementsRequest = await getLiveElements(params);\n    if (liveElementsRequest.status == 200 && liveElementsRequest.data) {\n      const data: LiveElement[] = liveElementsRequest.data;\n      dispatch({ type: \"SET_LIVE_ELEMENTS\", payload: data });\n    } else alert(\"Refresh failed\");\n    setLoading(false);\n  };\n  if (managerPage)\n    return (\n      <ManagerPage setManagerPage={setManagerPage} manager={managerPage} />\n    );\n  return (\n    <>\n      <CardWithTable\n        header={\n          <Grid container alignContent=\"space-between\">\n            <Grid item xs={2}>\n              {\" \"}\n            </Grid>\n            <Grid item xs={8}>\n              <CardHeader title={\"Standings\"} style={{ textAlign: \"center\" }} />\n            </Grid>\n            <Grid container item xs={2} alignContent=\"center\">\n              <IconButton\n                disabled={loading}\n                onClick={() => handleRefresh()}\n                style={{ margin: \"auto\", cursor: \"pointer\" }}\n              >\n                <RefreshIcon fontSize=\"large\" />\n              </IconButton>\n            </Grid>\n          </Grid>\n        }\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Rank</TableCell>\n            <TableCell>Manager</TableCell>\n            <TableCell>GW</TableCell>\n            <TableCell>Tot</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <StandingsRows\n            setManagerPage={setManagerPage}\n            managers={leagueData.parsedData.managers}\n          />\n        </TableBody>\n      </CardWithTable>\n    </>\n  );\n};\n\nexport default Standings;\n","import {\n  CardHeader,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { useStateValue } from \"../state\";\nimport { getPlayerWebName } from \"../tools\";\nimport CardWithTable from \"./CardWithTable\";\n\n// interface TransfersProps {}\n\nconst Transfers: React.FC = () => {\n  const [{ bssData, leagueData }] = useStateValue();\n  if (!bssData || !leagueData?.parsedData?.transfers) return null;\n  return (\n    <CardWithTable\n      header={\n        <CardHeader title={\"Transfers\"} style={{ textAlign: \"center\" }} />\n      }\n    >\n      <TableHead>\n        <TableRow>\n          <TableCell>Manager</TableCell>\n          <TableCell>In</TableCell>\n          <TableCell>Out</TableCell>\n          <TableCell>-</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {leagueData.parsedData.transfers.map((manager) => (\n          <TableRow key={manager.managerName}>\n            <TableCell>{manager.managerName}</TableCell>\n            <TableCell>\n              {manager.chip ??\n                manager.transfersIn\n                  .map((t) => getPlayerWebName(bssData.elements[t]))\n                  .join(\", \")}\n            </TableCell>\n            <TableCell>\n              {manager.chip ??\n                manager.transfersOut\n                  .map((t) => getPlayerWebName(bssData.elements[t]))\n                  .join(\", \")}\n            </TableCell>\n            <TableCell>\n              {manager.transfersCost !== 0 ? manager.transfersCost * -1 : \"\"}\n            </TableCell>\n          </TableRow>\n        ))}\n      </TableBody>\n    </CardWithTable>\n  );\n};\nexport default Transfers;\n","import { Box } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport Captains from \"./components/Captains\";\nimport Chips from \"./components/Chips\";\nimport DataPage from \"./components/DataPage\";\nimport NavBar from \"./components/NavBar\";\nimport Players from \"./components/Players\";\nimport Standings from \"./components/Standings\";\nimport Transfers from \"./components/Transfers\";\n\ntype PageType = \"main\" | \"transfers\" | \"standings\" | \"values\";\n\nconst League: React.FC = () => {\n  const [page, setPage] = useState<PageType>(\"main\");\n  const pageToShow = (page: PageType) => {\n    switch (page) {\n      case \"main\":\n        return (\n          <>\n            <Chips />\n            <Captains />\n            <Players />\n          </>\n        );\n      case \"transfers\":\n        return <Transfers />;\n      case \"standings\":\n        return <Standings />;\n      case \"values\":\n        return <DataPage />;\n      default:\n        return null;\n    }\n  };\n  return (\n    <>\n      <NavBar page={page} setPage={setPage} />\n      <Box paddingBottom={10} marginTop={20}>\n        {pageToShow(page)}\n      </Box>\n    </>\n  );\n};\nexport default League;\n","import { Box } from \"@material-ui/core\";\nimport Container from \"@material-ui/core/Container\";\nimport { useEffect } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Landing from \"./Landing\";\nimport League from \"./League\";\nimport { getBssData } from \"./service\";\nimport { useStateValue } from \"./state\";\nimport { DataType } from \"./types/data\";\n\nexport default function App(): JSX.Element {\n  const [{ leagueData }, dispatch] = useStateValue();\n  useEffect(() => {\n    const fetchBssData = async () => {\n      const bssRequest = await getBssData();\n      if (bssRequest.status == 200 && bssRequest.data) {\n        const data: DataType = bssRequest.data;\n        dispatch({ type: \"SET_BSS_DATA\", payload: data });\n      } else alert(\"The game is being updated.\");\n    };\n    fetchBssData();\n  }, []);\n\n  return (\n    <Router>\n      <Container maxWidth=\"lg\">\n        <Box height=\"100vh\">{leagueData ? <League /> : <Landing />}</Box>\n      </Container>\n    </Router>\n  );\n}\n","import CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport ReactDOM from \"react-dom\";\nimport { StateProvider, reducer } from \"./state\";\nimport App from \"./App\";\nimport theme from \"./theme\";\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <StateProvider reducer={reducer}>\n      <App />\n    </StateProvider>\n  </ThemeProvider>,\n  document.querySelector(\"#root\")\n);\n","import { getGWs } from \"../tools\";\nimport { DataType } from \"../types/data\";\nimport { LiveElement } from \"../types/liveElements\";\nimport { CurrPrevAndParsedLeague } from \"../types/newleague\";\nimport { State } from \"./state\";\n\nexport type Action =\n  | {\n      type: \"SET_BSS_DATA\";\n      payload: DataType;\n    }\n  | {\n      type: \"SET_LEAGUE_DATA\";\n      payload: CurrPrevAndParsedLeague;\n    }\n  | {\n      type: \"RESET_LEAGUE_DATA\";\n      payload: any;\n    }\n  | {\n      type: \"SET_SELECTED_GW\";\n      payload: string;\n    }\n  | {\n      type: \"SET_LIVE_ELEMENTS\";\n      payload: LiveElement[];\n    };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"SET_BSS_DATA\":\n      const gws = getGWs(action.payload.events);\n      return {\n        ...state,\n        bssData: {\n          ...action.payload,\n        },\n        gwsData: gws,\n        selectedGw: gws[0].id.toString(),\n      };\n    case \"SET_LEAGUE_DATA\":\n      return {\n        ...state,\n        leagueData: {\n          ...action.payload,\n        },\n      };\n    case \"RESET_LEAGUE_DATA\":\n      return {\n        ...state,\n        leagueData: null,\n      };\n    case \"SET_SELECTED_GW\":\n      return {\n        ...state,\n        selectedGw: action.payload,\n      };\n    case \"SET_LIVE_ELEMENTS\":\n      return {\n        ...state,\n        liveElements: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"],"sourceRoot":""}